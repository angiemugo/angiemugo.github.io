<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module3" script:language="StarBasic">&apos;*********************************************************************************************************
&apos;VALIDATION FUNCTIONS (CASE FUNCTIONS,FUNCTIONS TO CREATE ERROR SHEET AND GENERATE UPLOAD)
&apos;*********************************************************************************************************
Public Sub createErrorSheet()
	&apos;Start Here
	Call BankReset()
	Call RemoveAllListener()
    
    Dim sectionName As String
    Dim sectionDesc As String
    Dim fieldName As String
    Dim previousSectionName As String
    Dim row As Long
    Dim column As Long
    Dim errorFound As Boolean
    errorFound = False
    &apos; Get the Error Sheet and clear its content
    Dim errorSheet as object    
    errorSheet = ThisComponent.Sheets.getByName(&quot;Errors&quot;)
	errorSheet.Unprotect (Pwd)	
    errorSheet.clearContents( _
		com.sun.star.sheet.CellFlags.VALUE _
		+com.sun.star.sheet.CellFlags.STRING _
		+com.sun.star.sheet.CellFlags.DATETIME _
		+com.sun.star.sheet.CellFlags.FORMULA)

    Dim srNo As Integer
    Dim startIndex As Integer
    startIndex = 1
    Dim errInd As Integer
    Dim errDesc As String
    EMPTYCELLTYPE = com.sun.star.table.CellContentType.EMPTY
    Dim validationSheet as object
    validationSheet = ThisComponent.Sheets.getByName(&quot;Validations&quot;)
    validationSheet.UnProtect (Pwd)
    &apos;With validationSheet
    &apos;With Worksheets.Item(4)
    Dim rangeName as String, mandatFlag as String, validityCheck as Boolean
	
	
	&apos;Added By Janhavi on 23 Jan 2012
   	errInd = 1
    
    call MacroRunning()
	oProgressBarModel.setPropertyValue( &quot;ProgressValue&quot;, 10 )
    labelModel.Label=&quot;Please wait while data is being read and validated...&quot;
    globalProgressCounter=10
    
    For row = 1 To 65535
    	If(validationSheet.getCellByPosition(0,row).getType() = EMPTYCELLTYPE) Then
    		Exit For
    	End If	
        sectionName = validationSheet.getCellByPosition(0,row).String
		sectionDesc = validationSheet.getCellByPosition(12,row).String &apos; Description of cell Added by 671333
        
        If Trim(previousSectionName) = &quot;&quot; Then
            previousSectionName = sectionName
        End If
		
		oProgressBarModel.setPropertyValue( &quot;ProgressValue&quot;, globalProgressCounter )
    	globalProgressCounter=globalProgressCounter+1
				
        If row = 1 Or UCase(sectionName) &lt;&gt; UCase(previousSectionName) Then
         &apos;Added By Janhavi on 23 Jan 2012
	     &apos;Define Header of Error Sheet
	    
        	previousSectionName = sectionName
         
             If (row-1) =0 then
			&apos;errorSheet.getCellByPosition(0, errInd - 2).CharWeight = com.sun.star.awt.FontWeight.BOLD
			 errorSheet.getCellByPosition(0,0).String = &quot;Sr. No.&quot;
		     errorSheet.getCellByPosition(1,0).String = &quot;Section Name&quot;
		     errorSheet.getCellByPosition(2,0).String = &quot;Field&quot;
		     errorSheet.getCellByPosition(3,0).String = &quot;Error Description&quot;
		     errorSheet.getCellByPosition(4,0).String = &quot;Reference Cell&quot;
			End If
    	&apos;End Janhavi on 23 Jan 2012
        End If
        &apos;mandatFlag = validationSheet.getCellByPosition(3, row).String
        rangeName = validationSheet.getCellByPosition(2, row).String
        Dim startRowNum as Long , endRowNum as Long, startColumnNum as Long , endcolumnNum as Long
        oRange = ThisComponent.NamedRanges.getByName(rangeName)
      
        startRowNum = oRange.getReferredCells().getRangeAddress().StartRow
        endRowNum = oRange.getReferredCells().getRangeAddress().EndRow
        startColumnNum = oRange.getReferredCells().getRangeAddress().StartColumn
        endcolumnNum = oRange.getReferredCells().getRangeAddress().EndColumn
        
        If (startRowNum = endRowNum and startColumnNum = endColumnNum) then
        	REM this is a single cell validate against the rule in same rows
        	fieldName = validationSheet.getCellByPosition(1, row).String
      	
        	For column = 3 To 256 Step 2        	
		    	validationFunctionCell = validationSheet.getCellByPosition(column, row)
		    	&apos; if the cell is empty break current for loop and goto next row
			
&apos;*********		If(validationFunctionCell.getType() &lt;&gt; EMPTYCELLTYPE And InStr(validationFunctionCell.FormulaLocal, &quot;=&quot;)=0) Then		    
		 		If(validationFunctionCell.getType() = EMPTYCELLTYPE) Then
    		
    				Exit For
    			Else
    				validationFunctionInt = validationFunctionCell.String
    				errDesc = validationSheet.getCellByPosition(column+1, row).String
    				validityCheck = True
    				cell = oRange.getReferredCells().getCellByPosition(0,0)
    				cellValue = cell.String
    				Select Case validationFunctionInt
				    	Case &quot;0&quot; &apos;isMandatory
				    		CellProtStruc = cell.CellProtection
			    			If CellProtStruc.isLocked = False then
				        		validityCheck = isMandatory(cellValue)
				        	Else
				        		validityCheck = true
				        	End If
				        Case &quot;1&quot; &apos;TestAlphanumeric
				        	validityCheck = TestAlphanumeric(cellValue)
				        Case &quot;2&quot; &apos;TestPINPartnership
								validityCheck = TestPINPartnership(cellValue)
						Case &quot;3&quot; &apos;TestNumber
				        	validityCheck = TestNumber(cellValue)
				        Case &quot;4&quot; &apos;validateCurrencyFormat
				        	validityCheck = validateCurrencyFormat(cellValue)	
	                    Case &quot;5&quot; &apos;TestDate
			 				validityCheck = ValidateDate(cellValue)					
				        Case &quot;6&quot; &apos;TestDateBtwnRtnPeriod
							If(cellValue=&quot;&quot;) then
								validityCheck =True
							else
								validityCheck = TestDateBtwnRtnPeriod(cellValue)
							End IF

						Case &quot;7&quot; &apos;TestAlphabetOnly
							validityCheck = TestAlphabet(cellValue)
						Case &quot;8&quot; &apos;TestAlphabetWithSpaceOnly
							validityCheck = TestAlphabetWithSpace(cellValue)												        
						case &quot;9&quot;
				        	validityCheck = TestAlphabetNumSpl(cellValue)
						Case &quot;10&quot;
				       			If(cellValue=&quot;&quot;) then
								validityCheck =True
							else
								validityCheck = checkFutureDate(cellValue)							        	
							End If
						Case &quot;11&quot;
							validityCheck = checkDuplicateTaxPyrPIN(cellValue)
	    			    
		       			Case &quot;12&quot; &apos;check amount is greater than Zero or not
							        	if cellValue&lt;&gt;&quot;&quot; then
										        	if (validateCurrencyFormat(cellValue)) then
										        			if CDbl(cellValue)&gt;0 then
										        				validityCheck=True
										        			else
										        				validityCheck=false
										        			End If
										        		Else
								        					validityCheck=false
											        	End If
											    Else
											    		validityCheck=true
											    End If  
						Case &quot;13&quot;	&apos;TestAuditDate
							validityCheck = TestAuditDate(cellValue)
						Case &quot;14&quot; &apos;CompareSumValueSelf
							validityCheck = CompareSumValueSelf()
						Case &quot;15&quot; &apos;CompareSumValueWife
							validityCheck = CompareSumValueWife()
						Case &quot;16&quot; &apos;CompareValuesSelf
							validityCheck = CompareValuesSelf()
						Case &quot;17&quot; &apos;CompareValuesWife
							validityCheck = CompareValuesWife()
						Case &quot;18&quot; &apos;CompareProfitShareTotSelf
							validityCheck = CompareProfitShareTotSelf()
						Case &quot;19&quot; &apos;CompareProfitShareTotWife
							validityCheck = CompareProfitShareTotWife()
						Case &quot;20&quot; &apos;CompareEstateTotSelf
							validityCheck = CompareEstateTotSelf()
						Case &quot;21&quot; &apos;CompareEstateTotWife
							validityCheck = CompareEstateTotWife()
						Case &quot;22&quot; &apos;PinAuditCheckSelf
							validityCheck = PinAuditCheckSelf(cellValue)
						Case &quot;23&quot; &apos;PinAuditCheckWife
							validityCheck = PinAuditCheckWife(cellValue)
						Case &quot;24&quot; &apos;checkProfitLossSelf
							validityCheck = checkProfitLossSelf(cell.value)
						Case &quot;25&quot; &apos;checkProfitLossWife
							validityCheck = checkProfitLossWife(cell.value)
						Case &quot;30&quot; &apos;ValidateModelSerial
							validityCheck = ValidateModelSerial(cellValue)
						Case &quot;35&quot; &apos;CompareTotals
							validityCheck = CompareTotals(rangeName,cell.value)
						Case &quot;36&quot; &apos;greaterCompareTotals
							validityCheck = greaterCompareTotals(rangeName,cell.value)
						Case &quot;37&quot; &apos;lessCompareTotals
							validityCheck = lessCompareTotals(rangeName,cell.value)
						Case &quot;40&quot; &apos;checkDateOfDeposit
							validityCheck = checkDateOfDeposit(cellValue)
						Case &quot;41&quot; &apos;checkDateOfDepositSelfAssess
							validityCheck = checkDateOfDepositSelfAssess(cellValue)
						Case &quot;42&quot; &apos;prnEntriesBothSch
							validityCheck = prnEntriesBothSch()
						Case &quot;43&quot; &apos;prnEntriesSelfAssess
							validityCheck = prnEntriesSelfAssess()
						Case &quot;44&quot; &apos;advPaymentGreaterThanLiability
							validityCheck = advPaymentGreaterThanLiability()
						Case &quot;45&quot; &apos;selfPaymentGreaterThanLiability
							validityCheck = selfPaymentGreaterThanLiability()
						Case &quot;142&quot; &apos;prnEntriesBothSchWife
							validityCheck = prnEntriesBothSchWife()
						Case &quot;143&quot; &apos;prnEntriesSelfAssessWife
							validityCheck = prnEntriesSelfAssessWife()
						Case &quot;144&quot; &apos;advPaymentGreaterThanLiabilityWife
							validityCheck = advPaymentGreaterThanLiabilityWife()
						Case &quot;145&quot; &apos;selfPaymentGreaterThanLiabilityWife
							validityCheck = selfPaymentGreaterThanLiabilityWife()
						Case &quot;60&quot; &apos;TestPINMain
							validityCheck = TestPINMain(cellValue)
						Case &quot;65&quot; &apos;checkDuplicateTaxPyrWifePIN
							validityCheck = checkDuplicateTaxPyrWifePIN(cellValue)
						Case &quot;66&quot; &apos;checkDateOfDepositInstallment
							validityCheck = checkDateOfDepositInstallment(cellValue)
						Case &quot;70&quot; &apos;validateEmpPinsFrmSectionISelf
							validityCheck = validateEmpPinsFrmSectionISelf(cellValue)
						Case &quot;71&quot; &apos;validateEmpPinsFrmSectionIWife
							validityCheck = validateEmpPinsFrmSectionIWife(cellValue)
						Case &quot;72&quot; 	
							oCells1=oRange.getReferredCells().getCellByPosition(columnName,multriEntryRowNum)				
	        				If (rangeName = &quot;ProfitShare.ListS&quot; or rangeName = &quot;ProfitShare.ListW&quot;) and oCells1.getCellAddress().column=2 then
			        			If isErrorB=False and cellValue=&quot;Business&quot; then
				        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
						        			isErrorB=True
			        			ElseIf isErrorF=False and cellValue=&quot;Farming&quot; then
				        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
						        			isErrorF=True
						        ElseIf isErrorR=False and cellValue=&quot;Rental&quot; then
				        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
						        			isErrorR=True
						        ElseIf isErrorI=False and cellValue=&quot;Interest&quot; then
				        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
						        			isErrorI=True
						        ElseIf isErrorC=False and cellValue=&quot;Commission&quot; then
				        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
						        			isErrorC=True		
						        ElseIf isErrorO=False and cellValue=&quot;Other&quot; then
				        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
						        			isErrorO=True
								Else
						        		validityCheck=true	
				        		End If
			        		Else
					        		validityCheck=true	
			        		End If
						Case &quot;73&quot; &apos;checkPinIncomeTypeRatio
										validityCheck = checkPinIncomeTypeRatio(&quot;ProfitShare.ListS&quot;)
						Case &quot;75&quot; &apos;checkPinIncomeTypeRatio
										validityCheck = checkPinIncomeTypeRatio(&quot;ProfitShare.ListW&quot;)
						Case &quot;76&quot;
							        	validityCheck = validateDateOfComm(cellValue)
						Case &quot;77&quot;
							        	validityCheck = validateMatDate(cellValue)
						Case &quot;78&quot; &apos;TestNonIndiPIN
							validityCheck = TestNonIndiPIN(cellValue)
						case &quot;79&quot;
				        	validityCheck = TestAlphabetSpaceDotSpl(cellValue)
				        case &quot;80&quot;
				        	validityCheck = TestAlphanumericWithSpaceOnly(cellValue)
				        case &quot;81&quot; &apos;TestPRN
				        	validityCheck = TestPRN(cellValue)
				        case &quot;82&quot; &apos;&apos;checkProfitLossSelf
							validityCheck = checkProfitLossSelf(cell.value)
						case &quot;83&quot; &apos;&apos;checkProfitLossWife
							validityCheck = checkProfitLossWife(cell.value)
						case &quot;84&quot; &apos;CompareValuesSelfCheckPropritory
							validityCheck = CompareValuesSelfCheckPropritory()
						case &quot;85&quot; &apos;CompareValuesWifeCheckPropritory
							validityCheck = CompareValuesWifeCheckPropritory()
						case &quot;86&quot; &apos;checkDateOfCertificate
							validityCheck = checkDateOfCertificate(cellValue)
						case &quot;87&quot; 
							validityCheck = TestAlphaNumericForAccName(cellValue)
						Case Else
				            ina = ina + 1
				    End Select
				    If validityCheck = False Then
						srNo = srNo + 1
						
					&apos;Updated by janhavi on 23 Jan 2012
					&apos;errInd=	printErrorStack(errInd, startRowNum, fieldName, errDesc, startIndex, rangeName)
					singleCellRng= ColumnNumberToString(INT(cell.getRangeAddress().startcolumn))&amp; (cell.getRangeAddress().startrow +1)
					errInd = printErrorStack(errInd,sectionName, fieldName, errDesc,singleCellRng ,  srNo, rangeName,sectionDesc)
			        	&apos;errInd = errInd + 1
			        	errorFound = True
				    End If
    			End If    			
    		Next
   		ElseIF (startRowNum &lt;&gt; endRowNum and startColumnNum = endColumnNum) then	&apos;Aaryan
   			Rem This is Multi-Entry field validate according to the range specified
    		startMEVR = validationSheet.getCellByPosition(3, row).value
    		endMEVR = validationSheet.getCellByPosition(4, row).value
    			doValidation = False

    			For multiEntryColNum = startMEVR to endMEVR 
    				rowNumber =	validationSheet.getCellByPosition(2, INT(multiEntryColNum)).value
    				curCell = ThisComponent.sheets.getByName(sectionName).getCellByPosition(startColumnNum,rowNumber)
					CellProtStruc = curCell.CellProtection
    				If(curCell.getType() &lt;&gt; EMPTYCELLTYPE and CellProtStruc.isLocked = False And InStr(curCell.FormulaLocal, &quot;=&quot;)=0) Then
    					doValidation = True
    					Exit For
					End If	    				
    			Next &apos;multiEntryColNum 
    			If (doValidation) Then
	    			Rem Do the validation for the row start from startmultyentryvalidationrow to endmultyentryvalidationrow
	    			For eachCellValidationRow = startMEVR to endMEVR	    				
	    				&apos;columnName = validationSheet.getCellByPosition(2, eachCellValidationRow).String
	    				fieldName = validationSheet.getCellByPosition(1, eachCellValidationRow).String
						rowName = validationSheet.getCellByPosition(2, eachCellValidationRow).String
						rowNumber =	validationSheet.getCellByPosition(2, INT(eachCellValidationRow)).value			
		    			oCells= ThisComponent.sheets.getByName(sectionName).getCellByPosition(startColumnNum,rowNumber)
			    		CellProtStruc = oCells.CellProtection
			    		If CellProtStruc.isLocked = False then
			    				
	    				For column = 3 To 256 Step 2        	
					    	validationFunctionCell = validationSheet.getCellByPosition(column, eachCellValidationRow)
					    	&apos; if the cell is empty break current for loop and goto next row
					    	If(validationFunctionCell.getType() = EMPTYCELLTYPE) Then
			    				Exit For
			    			Else
			    				validationFunctionInt = validationFunctionCell.String
			    				errDesc = validationSheet.getCellByPosition(column+1, eachCellValidationRow).String
			    				validityCheck = True
			    				&apos; TODO change tge multriEntryColNum with the value related to C column value of Validations			    				
			    				cellValue = ThisComponent.sheets.getByName(sectionName).getCellByPosition(startColumnNum,rowNumber).String
			    				&apos;cellValue = oRange.getReferredCells().getCellByPosition(startColumnNum,rowName).String
			    				multiCell = ThisComponent.sheets.getByName(sectionName).getCellByPosition(startColumnNum,rowNumber).CellAddress
			    				&apos;multiCell = oRange.getReferredCells().getCellByPosition(startColumnNum,rowName).CellAddress
			    				multiCellAddress =  ThisComponent.Sheets.getByIndex(multiCell.Sheet).Name +&quot;.&quot;+ColumnNumberToString(multiCell.Column)+multiCell.Row
			    				&apos;MsgBox multiCellAddress &amp; &quot;::::&quot; &amp; validationFunctionInt &amp; &quot;::::&quot; &amp; cellValue
			    				Select Case validationFunctionInt
							    	Case &quot;0&quot; &apos;isMandatory
							        	validityCheck = isMandatory(cellValue)
							        Case &quot;1&quot; &apos;TestAlphanumeric
							        	validityCheck = TestAlphanumeric(cellValue)
							        Case &quot;2&quot; &apos;TestPINPartnership
							        	validityCheck = TestPINPartnership(cellValue)
										
							        Case &quot;3&quot; &apos;TestNumber
							        	validityCheck = TestNumber(ThisComponent.sheets.getByName(sectionName).getCellByPosition(startColumnNum,rowNumber).value)
							        Case &quot;4&quot; &apos;TestCurrencyFormat
							        	validityCheck = validateCurrencyFormat(cellValue)	
							        Case &quot;5&quot; &apos;TestDate
										validityCheck = ValidateDate(cellValue)					
							        Case &quot;6&quot; &apos;TestDateBtwnRtnPeriod
											If(cellValue=&quot;&quot;) then
												validityCheck =True
											else
												validityCheck = TestDateBtwnRtnPeriod(cellValue)
											End IF
									Case &quot;7&quot; &apos;TestAlphabetOnly
										validityCheck = TestAlphabet(cellValue)
									Case &quot;8&quot; &apos;TestAlphabetWithSpaceOnly
										validityCheck = TestAlphabetWithSpace(cellValue)												        																		        				        			        				        
									Case &quot;9&quot;
							        	validityCheck = TestAlphabetNumSpl(cellValue)
									Case &quot;10&quot;
										validityCheck = checkFutureDate(cellValue)							        	
									Case &quot;11&quot;
										validityCheck = checkDuplicateTaxPyrPIN(cellValue)							        	
								    Case &quot;12&quot; &apos;check amount is greater than Zero or not
							        		if cellValue&lt;&gt;&quot;&quot; then
										        	if (validateCurrencyFormat(cellValue)) then
										        			if CDbl(cellValue)&gt;0 then
										        				validityCheck=True
										        			else
										        				validityCheck=false
										        			End If
										        		Else
								        					validityCheck=false
											        	End If
											    Else
											    		validityCheck=true
											    End If  

									Case &quot;13&quot;	&apos;TestAuditDate
										validityCheck = TestAuditDate(cellValue)
									Case &quot;14&quot; &apos;CompareSumValueSelf
										validityCheck = CompareSumValueSelf()
									Case &quot;15&quot; &apos;CompareSumValueWife
										validityCheck = CompareSumValueWife()
									Case &quot;16&quot; &apos;CompareValuesSelf
										validityCheck = CompareValuesSelf()
									Case &quot;17&quot; &apos;CompareValuesWife
										validityCheck = CompareValuesWife()
									Case &quot;18&quot; &apos;CompareProfitShareTotSelf
										validityCheck = CompareProfitShareTotSelf()
									Case &quot;19&quot; &apos;CompareProfitShareTotWife
										validityCheck = CompareProfitShareTotWife()
									Case &quot;20&quot; &apos;CompareEstateTotSelf
										validityCheck = CompareEstateTotSelf()
									Case &quot;21&quot; &apos;CompareEstateTotWife
										validityCheck = CompareEstateTotWife()
									Case &quot;22&quot; &apos;PinAuditCheckSelf
										validityCheck = PinAuditCheckSelf(cellValue)
									Case &quot;23&quot; &apos;PinAuditCheckWife
										validityCheck = PinAuditCheckWife(cellValue)
									Case &quot;24&quot; &apos;checkProfitLossSelf
										validityCheck = checkProfitLossSelf(cell.value)
									Case &quot;25&quot; &apos;checkProfitLossWife
										validityCheck = checkProfitLossWife(cell.value)
									Case &quot;30&quot; &apos;ValidateModelSerial
										validityCheck = ValidateModelSerial(cellValue)
									Case &quot;35&quot; &apos;CompareTotals
										validityCheck = CompareTotals(rangeName,cell.value)
									Case &quot;36&quot; &apos;greaterCompareTotals
										validityCheck = greaterCompareTotals(rangeName,cell.value)
									Case &quot;37&quot; &apos;lessCompareTotals
										validityCheck = lessCompareTotals(rangeName,cell.value)
									Case &quot;40&quot; &apos;checkDateOfDeposit
										validityCheck = checkDateOfDeposit(cellValue)
									Case &quot;41&quot; &apos;checkDateOfDepositSelfAssess
										validityCheck = checkDateOfDepositSelfAssess(cellValue)
									Case &quot;42&quot; &apos;prnEntriesBothSch
										validityCheck = prnEntriesBothSch()
									Case &quot;43&quot; &apos;prnEntriesSelfAssess
										validityCheck = prnEntriesSelfAssess()
									Case &quot;44&quot; &apos;advPaymentGreaterThanLiability
										validityCheck = advPaymentGreaterThanLiability()
									Case &quot;142&quot; &apos;prnEntriesBothSchWife
										validityCheck = prnEntriesBothSchWife()
									Case &quot;143&quot; &apos;prnEntriesSelfAssessWife
										validityCheck = prnEntriesSelfAssessWife()
									Case &quot;144&quot; &apos;advPaymentGreaterThanLiabilityWife
										validityCheck = advPaymentGreaterThanLiabilityWife()
									Case &quot;145&quot; &apos;selfPaymentGreaterThanLiabilityWife
										validityCheck = selfPaymentGreaterThanLiabilityWife()
									Case &quot;60&quot; &apos;TestPINMain
										validityCheck = TestPINMain(cellValue)
									Case &quot;65&quot; &apos;checkDuplicateTaxPyrWifePIN
										validityCheck = checkDuplicateTaxPyrWifePIN(cellValue)
									Case &quot;66&quot; &apos;checkDateOfDepositInstallment
										validityCheck = checkDateOfDepositInstallment(cellValue)
									Case &quot;70&quot; &apos;validateEmpPinsFrmSectionISelf
										validityCheck = validateEmpPinsFrmSectionISelf(cellValue)
									Case &quot;71&quot; &apos;validateEmpPinsFrmSectionIWife
										validityCheck = validateEmpPinsFrmSectionIWife(cellValue)
									Case &quot;72&quot; 	
												oCells1=oRange.getReferredCells().getCellByPosition(columnName,multriEntryRowNum)				
						        				If rangeName = &quot;ProfitShare.ListS&quot; and oCells1.getCellAddress().column=2 then
								        			If isErrorB=False and cellValue=&quot;Business&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorB=True
								        			ElseIf isErrorF=False and cellValue=&quot;Farming&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorF=True
											        ElseIf isErrorR=False and cellValue=&quot;Rental&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorR=True
											        ElseIf isErrorI=False and cellValue=&quot;Interest&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorI=True
											        ElseIf isErrorC=False and cellValue=&quot;Commission&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorC=True		
											        ElseIf isErrorO=False and cellValue=&quot;Other&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorO=True
													Else
											        		validityCheck=true	
									        		End If
								        		Else
										        		validityCheck=true	
								        		End If
								    Case &quot;73&quot; &apos;checkPinIncomeTypeRatio
										validityCheck = checkPinIncomeTypeRatio(&quot;ProfitShare.ListS&quot;)
									Case &quot;75&quot; &apos;checkPinIncomeTypeRatio
										validityCheck = checkPinIncomeTypeRatio(&quot;ProfitShare.ListW&quot;)
									Case &quot;76&quot;
							        	validityCheck = validateDateOfComm(cellValue)
									Case &quot;77&quot;
							        	validityCheck = validateMatDate(cellValue)
							        case &quot;79&quot;
							        	validityCheck = TestAlphabetSpaceDotSpl(cellValue)
							        case &quot;80&quot;
				        				validityCheck = TestAlphanumericWithSpaceOnly(cellValue)
				        			case &quot;81&quot; &apos;TestPRN
							        	validityCheck = TestPRN(cellValue)
							        case &quot;82&quot; &apos;&apos;checkProfitLossSelf
										validityCheck = checkProfitLossSelf(cell.value)
									case &quot;83&quot; &apos;&apos;checkProfitLossWife
										validityCheck = checkProfitLossWife(cell.value)
									case &quot;84&quot; &apos;CompareValuesSelfCheckPropritory
										validityCheck = CompareValuesSelfCheckPropritory()
									case &quot;85&quot; &apos;CompareValuesWifeCheckPropritory
										validityCheck = CompareValuesWifeCheckPropritory()
									case &quot;86&quot; &apos;checkDateOfCertificate
										validityCheck = checkDateOfCertificate(cellValue)
									case &quot;87&quot; 
										validityCheck = TestAlphaNumericForAccName(cellValue)
							        Case Else
							            ina = ina + 1
							    End Select
							    
							 
							      &apos;Check For Condtional Mandatory
							    If validityCheck = False Then
									srNo = srNo + 1
								&apos;Updated by janhavi on 23 Jan 2012
								&apos;	errInd = printErrorStack(errInd, startRowNum + multriEntryRowNum , fieldName, errDesc, startIndex, rangeName)
						        &apos;&apos;	errInd = printErrorStack(errInd,sectionName, fieldName,errDesc,startRowNum + multriEntryRowNum,srNo, rangeName)
							        &apos;Changes by Maulika start
										errInd = printErrorStack(errInd,sectionName, fieldName, errDesc, ColumnNumberToString(startColumnNum)&amp; rowNumber+1,  srNo, rangeName,sectionName)
									&apos;changes by Maulika end
						        	&apos;errInd = errInd + 1
						        	errorFound = True
							    End If
			    			End If    			
		    			Next &apos;column
		  			  End If
		    			
	    			Next &apos;eachCellValidation
	    		End If
    	Else 
	&apos;		if rangeName=&quot;PLA.OtherExpensesListS&quot; then
	&apos; 			MsgBox &quot;Here&quot;
	&apos; 		End If
    		Rem This is Multi-Entry field validate according to the range specified
    		startMEVR = validationSheet.getCellByPosition(3, row).value - 1
    		endMEVR = validationSheet.getCellByPosition(4, row).value - 1
    		For multriEntryRowNum = 0 to endRowNum - startRowNum
    			REM Check whether any column contains data 
    			REM for current multi-entry row using multriEntryRowNum, startColNum and endColNum
    			REM If any column contains data then run the validationrules according to the range
    			
    			doValidation = False
    			&apos;Code Added By janhavi to reset the offset for those whose column start from 1 instead of 0 On 1.Jan.2012
    			offsetStartCol = 0
    			offsetEndColumn = endColumnNum - startColumnNum
    			For multiEntryColNum = offsetStartCol to offsetEndColumn 
    				curCell = oRange.getReferredCells().getCellByPosition(multiEntryColNum,multriEntryRowNum)
					&apos;Added by Janhavi for skiping cells with formulas on 7th Dec 2011
    				If(curCell.getType() &lt;&gt; EMPTYCELLTYPE And InStr(curCell.FormulaLocal, &quot;=&quot;)=0) Then
&apos;    				If(curCell.getType() &lt;&gt; EMPTYCELLTYPE ) Then
    					doValidation = True
    					Exit For
					End If	    				
    			Next &apos;multiEntryColNum 
    			If (doValidation) Then
	    			Rem Do the validation for the row start from startmultyentryvalidationrow to endmultyentryvalidationrow
	    			For eachCellValidationRow = startMEVR to endMEVR
	    				fieldName = validationSheet.getCellByPosition(1, eachCellValidationRow).String
	    				columnName = validationSheet.getCellByPosition(2, eachCellValidationRow).String	    				
		    			oCells=oRange.getReferredCells().getCellByPosition(columnName,multriEntryRowNum)
			    		CellProtStruc = oCells.CellProtection
			    		If CellProtStruc.isLocked = False then
			    				
	    				For column = 3 To 256 Step 2        	
					    	validationFunctionCell = validationSheet.getCellByPosition(column, eachCellValidationRow)
					    	&apos; if the cell is empty break current for loop and goto next row
					    	If(validationFunctionCell.getType() = EMPTYCELLTYPE) Then
			    				Exit For
			    			Else
			    				validationFunctionInt = validationFunctionCell.String
			    				errDesc = validationSheet.getCellByPosition(column+1, eachCellValidationRow).String
			    				validityCheck = True
			    				&apos; TODO change tge multriEntryColNum with the value related to C column value of Validations			    				
			    				cellValue = oRange.getReferredCells().getCellByPosition(columnName,multriEntryRowNum).String
			    				
			    				multiCell = oRange.getReferredCells().getCellByPosition(columnName,multriEntryRowNum).CellAddress
			    				multiCellAddress =  ThisComponent.Sheets.getByIndex(multiCell.Sheet).Name +&quot;.&quot;+ColumnNumberToString(multiCell.Column)+multiCell.Row
			    				&apos;MsgBox multiCellAddress &amp; &quot;::::&quot; &amp; validationFunctionInt &amp; &quot;::::&quot; &amp; cellValue
			    				Select Case validationFunctionInt
							    	Case &quot;0&quot; &apos;isMandatory
							        	validityCheck = isMandatory(cellValue)
							        Case &quot;1&quot; &apos;TestAlphanumeric
							        	validityCheck = TestAlphanumeric(cellValue)
							        Case &quot;2&quot; &apos;TestPINPartnership
							        	validityCheck = TestPINPartnership(cellValue)
										
							        Case &quot;3&quot; &apos;TestNumber
							        	validityCheck = TestNumber(oRange.getReferredCells().getCellByPosition(columnName,multriEntryRowNum).value)
							        Case &quot;4&quot; &apos;TestCurrencyFormat
							        	validityCheck = validateCurrencyFormat(cellValue)	
							        Case &quot;5&quot; &apos;TestDate
										validityCheck = ValidateDate(cellValue)					
							        Case &quot;6&quot; &apos;TestDateBtwnRtnPeriod
											If(cellValue=&quot;&quot;) then
												validityCheck =True
											else
												validityCheck = TestDateBtwnRtnPeriod(cellValue)
											End IF
									Case &quot;7&quot; &apos;TestAlphabetOnly
										validityCheck = TestAlphabet(cellValue)
									Case &quot;8&quot; &apos;TestAlphabetWithSpaceOnly
										validityCheck = TestAlphabetWithSpace(cellValue)												        																		        				        			        				        
									Case &quot;9&quot;
							        	validityCheck = TestAlphabetNumSpl(cellValue)
									Case &quot;10&quot;
										validityCheck = checkFutureDate(cellValue)							        	
									Case &quot;11&quot;
										validityCheck = checkDuplicateTaxPyrPIN(cellValue)							        	
								    Case &quot;12&quot; &apos;check amount is greater than Zero or not
							        		if cellValue&lt;&gt;&quot;&quot; then
										        	if (validateCurrencyFormat(cellValue)) then
										        			if CDbl(cellValue)&gt;0 then
										        				validityCheck=True
										        			else
										        				validityCheck=false
										        			End If
										        		Else
								        					validityCheck=false
											        	End If
											    Else
											    		validityCheck=true
											    End If  
									Case &quot;13&quot;	&apos;TestAuditDate
										validityCheck = TestAuditDate(cellValue)
									Case &quot;14&quot; &apos;CompareSumValueSelf
										validityCheck = CompareSumValueSelf()
									Case &quot;15&quot; &apos;CompareSumValueWife
										validityCheck = CompareSumValueWife()
									Case &quot;16&quot; &apos;CompareValuesSelf
										validityCheck = CompareValuesSelf()
									Case &quot;17&quot; &apos;CompareValuesWife
										validityCheck = CompareValuesWife()
									Case &quot;18&quot; &apos;CompareProfitShareTotSelf
										validityCheck = CompareProfitShareTotSelf()
									Case &quot;19&quot; &apos;CompareProfitShareTotWife
										validityCheck = CompareProfitShareTotWife()
									Case &quot;20&quot; &apos;CompareEstateTotSelf
										validityCheck = CompareEstateTotSelf()
									Case &quot;21&quot; &apos;CompareEstateTotWife
										validityCheck = CompareEstateTotWife()
									Case &quot;22&quot; &apos;PinAuditCheckSelf
										validityCheck = PinAuditCheckSelf(cellValue)
									Case &quot;23&quot; &apos;PinAuditCheckWife
										validityCheck = PinAuditCheckWife(cellValue)
									Case &quot;24&quot; &apos;checkProfitLossSelf
										validityCheck = checkProfitLossSelf(cell.value)
									Case &quot;25&quot; &apos;checkProfitLossWife
										validityCheck = checkProfitLossWife(cell.value)
									Case &quot;30&quot; &apos;ValidateModelSerial
										validityCheck = ValidateModelSerial(cellValue)
									Case &quot;35&quot; &apos;CompareTotals
										validityCheck = CompareTotals(rangeName,cell.value)
									Case &quot;36&quot; &apos;greaterCompareTotals
										validityCheck = greaterCompareTotals(rangeName,cell.value)
									Case &quot;37&quot; &apos;lessCompareTotals
										validityCheck = lessCompareTotals(rangeName,cell.value)
									Case &quot;40&quot; &apos;checkDateOfDeposit
										validityCheck = checkDateOfDeposit(cellValue)
									Case &quot;41&quot; &apos;checkDateOfDepositSelfAssess
										validityCheck = checkDateOfDepositSelfAssess(cellValue)
									Case &quot;42&quot; &apos;prnEntriesBothSch
										validityCheck = prnEntriesBothSch()
									Case &quot;43&quot; &apos;prnEntriesSelfAssess
										validityCheck = prnEntriesSelfAssess()
									Case &quot;44&quot; &apos;advPaymentGreaterThanLiability
										validityCheck = advPaymentGreaterThanLiability()
									Case &quot;45&quot; &apos;selfPaymentGreaterThanLiability
										validityCheck = selfPaymentGreaterThanLiability()
									Case &quot;142&quot; &apos;prnEntriesBothSchWife
										validityCheck = prnEntriesBothSchWife()
									Case &quot;143&quot; &apos;prnEntriesSelfAssessWife
										validityCheck = prnEntriesSelfAssessWife()
									Case &quot;144&quot; &apos;advPaymentGreaterThanLiabilityWife
										validityCheck = advPaymentGreaterThanLiabilityWife()
									Case &quot;145&quot; &apos;selfPaymentGreaterThanLiabilityWife
										validityCheck = selfPaymentGreaterThanLiabilityWife()
									Case &quot;60&quot; &apos;TestPINMain
										validityCheck = TestPINMain(cellValue)
									Case &quot;65&quot; &apos;checkDuplicateTaxPyrWifePIN
										validityCheck = checkDuplicateTaxPyrWifePIN(cellValue)
									Case &quot;66&quot; &apos;checkDateOfDepositInstallment
										validityCheck = checkDateOfDepositInstallment(cellValue)
									Case &quot;70&quot; &apos;validateEmpPinsFrmSectionISelf
										validityCheck = validateEmpPinsFrmSectionISelf(cellValue)
									Case &quot;71&quot; &apos;validateEmpPinsFrmSectionIWife
										validityCheck = validateEmpPinsFrmSectionIWife(cellValue)
									Case &quot;72&quot; 	
												oCells1=oRange.getReferredCells().getCellByPosition(columnName,multriEntryRowNum)				
						        				If rangeName = &quot;ProfitShare.ListS&quot; and oCells1.getCellAddress().column=2 then
								        			If isErrorB=False and cellValue=&quot;Business&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorB=True
								        			ElseIf isErrorF=False and cellValue=&quot;Farming&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorF=True
											        ElseIf isErrorR=False and cellValue=&quot;Rental&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorR=True
											        ElseIf isErrorI=False and cellValue=&quot;Interest&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorI=True
											        ElseIf isErrorC=False and cellValue=&quot;Commission&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorC=True		
											        ElseIf isErrorO=False and cellValue=&quot;Other&quot; then
									        					validityCheck = checkDuplicateIncomeType(rangeName,oCells)
											        			isErrorO=True
													Else
											        		validityCheck=true	
									        		End If
								        		Else
										        		validityCheck=true	
								        		End If
								    Case &quot;73&quot; &apos;checkPinIncomeTypeRatio
										validityCheck = checkPinIncomeTypeRatio(&quot;ProfitShare.ListS&quot;)
									Case &quot;75&quot; &apos;checkPinIncomeTypeRatio
										validityCheck = checkPinIncomeTypeRatio(&quot;ProfitShare.ListW&quot;)
									Case &quot;76&quot;
							        	validityCheck = validateDateOfComm(cellValue)
									Case &quot;77&quot;
							        	validityCheck = validateMatDate(cellValue)
							        case &quot;79&quot;
							        	validityCheck = TestAlphabetSpaceDotSpl(cellValue)
							        case &quot;80&quot;
							        	validityCheck = TestAlphanumericWithSpaceOnly(cellValue)
							        case &quot;81&quot; &apos;TestPRN
							        	validityCheck = TestPRN(cellValue)
							        case &quot;82&quot; &apos;&apos;checkProfitLossSelf
										validityCheck = checkProfitLossSelf(cell.value)
									case &quot;83&quot; &apos;&apos;checkProfitLossWife
										validityCheck = checkProfitLossWife(cell.value)
									case &quot;84&quot; &apos;CompareValuesSelfCheckPropritory
										validityCheck = CompareValuesSelfCheckPropritory()
									case &quot;85&quot; &apos;CompareValuesWifeCheckPropritory
										validityCheck = CompareValuesWifeCheckPropritory()
									case &quot;86&quot; &apos;checkDateOfCertificate
										validityCheck = checkDateOfCertificate(cellValue)
									case &quot;87&quot; 
										validityCheck = TestAlphaNumericForAccName(cellValue)
							        Case Else
							            ina = ina + 1
							    End Select
							   
							 
							      &apos;Check For Condtional Mandatory
							    If validityCheck = False Then
									srNo = srNo + 1
								&apos;Updated by janhavi on 23 Jan 2012
								&apos;	errInd = printErrorStack(errInd, startRowNum + multriEntryRowNum , fieldName, errDesc, startIndex, rangeName)
						        &apos;&apos;	errInd = printErrorStack(errInd,sectionName, fieldName,errDesc,startRowNum + multriEntryRowNum,srNo, rangeName)
							        &apos;Changes by Maulika start
							        if offsetEndColumn = endColumnNum then
										errInd = printErrorStack(errInd,sectionName, fieldName, errDesc, ColumnNumberToString(INT(columnName))&amp;(startRowNum + multriEntryRowNum + 1) ,  srNo, rangeName,sectionDesc)
									else
										&apos;for generating the pointer for schedules not starting from column &apos;A&apos;
										errInd = printErrorStack(errInd,sectionName, fieldName, errDesc, ColumnNumberToString(INT(columnName)+startColumnNum)&amp;(startRowNum + multriEntryRowNum + 1) ,  srNo, rangeName,sectionDesc)
									end if
									&apos;changes by Maulika end
						        	&apos;errInd = errInd + 1
						        	errorFound = True
							    End If
			    			End If    			
		    			Next &apos;column
		  			  End If
		    			
	    			Next &apos;eachCellValidation
	    		End If
	    	Next &apos;multriEntryRowNum
    	End If       
  	Next
  	
   errorSheet.protect (Pwd)
   validationSheet.Protect (Pwd)
   
   oProgressBarModel.setPropertyValue( &quot;ProgressValue&quot;, 500 )
   
  	If errorFound Then
    	MsgBox &quot;Error Found in the sheet&quot;
      	oSheet = ThisComponent.Sheets.getByName(&quot;Errors&quot;)
		ThisComponent.CurrentController.setActiveSheet(oSheet)
	
	Else
        Call RunSheetUploadDlg
		If (allow=true) then
	        Call fillUploadSheet
	        &apos;MsgBox &quot;Sheets are ready to be uploaded.&quot;
	      &apos;  msg1 = MsgBox(msg, vbQuestion + vbYesNo, &quot;Generate Upload File&quot;)
	      &apos;  If msg1 = vbYes Then
	       &apos; Generate_upload
	       generate_ods_file
       End If
      &apos;  End If
    End If
    
    call AddListener()
  &apos;Call createErrorSheetForList(errInd, srNo)   
End Sub

Public Function CheckOtherValidations(rangeName As String, row as Long, Optional colName As String) As Boolean
	CheckOtherValidations = True
End Function
&apos;PREVIOUS METHOD
&apos;Public Function printErrorStack(errline_index As Integer, col_no As Double, field As String, error As String, start_index As Integer, rangeName As String) As Integer
&apos;   Dim Doc As Object
&apos;	Dim SheetError As Object
&apos;	Dim CellError As Object 
&apos;   Doc = ThisComponent
&apos;	SheetError = Doc.Sheets.getByName(&quot;Errors&quot;)
&apos;	CellError = SheetError.getCellByPosition(0,errline_index)
&apos;	CellError.String = errline_index - start_index
&apos;	CellError = SheetError.getCellByPosition(1,errline_index)
&apos;	CellError.String = col_no + 1
&apos;	CellError = SheetError.getCellByPosition(2,errline_index)
&apos;	CellError.String = field	
&apos;	CellError = SheetError.getCellByPosition(3,errline_index)
&apos;	CellError.String = error
	&apos;CellError = SheetError.getCellByPosition(4,errline_index)
	&apos;CellError.String = rangeName
&apos;    printErrorStack = errline_index + 1
    &apos;ERR_COUNT = ERR_COUNT + 1
&apos;End Function

&apos;UPDATED METHOD TO PRINT ERROR STACK IN ERROR SHEET. Updated By Janhavi 23 Jan 2012
&apos;Public Function printErrorStack(errline_index As Integer,sectionName as String, field As String, error As String, col_no As Double, srNo As Integer, rangeName As String) As Integer
&apos;    Dim Doc As Object
&apos;	Dim SheetError As Object
&apos;	Dim CellError As Object 
&apos;   Doc = ThisComponent
&apos;	SheetError = Doc.Sheets.getByName(&quot;Errors&quot;)
&apos;	CellError = SheetError.getCellByPosition(0,errline_index)
&apos;	CellError.String = srNo
&apos;	CellError = SheetError.getCellByPosition(1,errline_index)
&apos;	CellError.String = sectionName
&apos;	CellError = SheetError.getCellByPosition(2,errline_index)
&apos;	CellError.String = field
&apos;	CellError = SheetError.getCellByPosition(3,errline_index)
&apos;	CellError.String = error
&apos;	CellError = SheetError.getCellByPosition(4,errline_index)
&apos;	CellError.String = col_no + 1
	
	&apos;CellError = SheetError.getCellByPosition(4,errline_index)
	&apos;CellError.String = rangeName
&apos;    printErrorStack = errline_index + 1
    &apos;ERR_COUNT = ERR_COUNT + 1
&apos;End Function

REM changed by  maulika for Hyperlinks
Public Function printErrorStack(errline_index As Integer,sectionName as String, field As String, error As String, col_no As String, srNo As Integer, rangeName As String, optional sectionDesc As String) As Integer
    Dim Doc As Object
	Dim SheetError As Object
	Dim CellError As Object 
    Doc = ThisComponent
	SheetError = Doc.Sheets.getByName(&quot;Errors&quot;)
	CellError = SheetError.getCellByPosition(0,errline_index)
	CellError.String = srNo
	CellError = SheetError.getCellByPosition(1,errline_index)
	CellError.String = sectionDesc
&apos;	CellError.CharColor = RGB(0,0,0)
	CellError.CharUnderline = 0
	CellError = SheetError.getCellByPosition(2,errline_index)
	CellError.String = field
&apos;	CellError.CharColor = RGB(0,0,255)
	CellError.CharUnderline = 1
	CellError.FormulaLocal=&quot;=HYPERLINK(CONCATENATE(&quot;&quot;#&quot;&quot;;&quot;&quot;&quot;+ sectionName+&quot;&quot;&quot;;&quot;&quot;!&quot;&quot;;&quot;&quot;&quot;+col_no+&quot;&quot;&quot;);&quot;&quot;&quot;+field+&quot;&quot;&quot;)&quot;
	CellError = SheetError.getCellByPosition(3,errline_index)
	CellError.String = error
	CellError = SheetError.getCellByPosition(4,errline_index)
	CellError.String = col_no
	&apos;CellError = SheetError.getCellByPosition(4,errline_index)
	&apos;CellError.String = rangeName
    printErrorStack = errline_index + 1
    &apos;ERR_COUNT = ERR_COUNT + 1
End Function
REM end of changes by maulika

&apos;**************************************************************
&apos;	VALIDATION CASES FUNCTIONS
&apos;**************************************************************
&apos;Case 0 isMandatory
&apos;Case 1 TestAlphanumeric
&apos;Case 2 TestPIN
&apos;Case 3 TestNumber
&apos;Case 4 validateCurrencyFormat
&apos;Case 5 TestDate
&apos;Case 6 TestDateBtwnRtnPeriod
&apos;Case 7 TestAlphabet
&apos;Case 8 TestAlphabetWithSpace
&apos;Case 9 TestAlphabetNumSpl
&apos;Case 10 checkFutureDate
&apos;Case 11 checkDuplicateTaxPyrPIN
&apos;Case 12 check amount greater than zero
Public Function isMandatory(lstr_check As String) As Boolean
	isMandatory = True
	If Trim(lstr_check) = &quot;&quot; Then
		isMandatory = False
	End If
	&apos;sheetName = value.Worksheet.Name
End Function

Public Function TestAlphanumeric(lstr_check As String) As Boolean
	&apos;allowed characters A to Z, a to z, 0 To 9 And Blank
	Dim i As Integer
	Dim ia As Integer
	Dim ina As Integer
	Dim stlen As Integer	
	stlen = Len(lstr_check)
	ia = 0
	TestAlphanumeric = True
	For i = 1 To stlen
	    Select Case (Mid(lstr_check, i, 1))
	        Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
	            ia = ia + 1
	        Case &quot;a&quot; To &quot;z&quot;          &apos;a to z
	            ia = ia + 1
	        &apos;Case &quot; &quot;                 &apos; Blank
	        &apos;   ia = ia + 1
	        Case &quot;0&quot; To &quot;9&quot;          &apos;0 to 9
	        ia = ia + 1
	      &apos; Case &quot;,&quot;                 &apos;,
	      &apos;  ia = ia + 1
	      &apos;  Case &quot;.&quot;                 &apos;.
	      &apos;  ia = ia + 1
	      &apos;  Case &quot;/&quot;
	      &apos;  ia = ia + 1
	     &apos;   Case &quot;-&quot;
	     &apos;   ia = ia + 1
	        Case Else
	            TestAlphanumeric = False
				Exit Function 	
	    End Select
	Next i
End Function

Public Function TestAlphanumericWithSpaceOnly(lstr_check As String) As Boolean
	&apos;allowed characters A to Z, a to z, 0 To 9 And Blank
	Dim i As Integer
	Dim ia As Integer
	Dim ina As Integer
	Dim stlen As Integer	
	stlen = Len(lstr_check)
	ia = 0
	TestAlphanumericWithSpaceOnly = True
	For i = 1 To stlen
	    Select Case (Mid(lstr_check, i, 1))
	        Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
	            ia = ia + 1
	        Case &quot;a&quot; To &quot;z&quot;          &apos;a to z
	            ia = ia + 1
	        Case &quot; &quot;                 &apos; Blank
	           ia = ia + 1
	        Case &quot;0&quot; To &quot;9&quot;          &apos;0 to 9
	        	ia = ia + 1
	        Case Else
	            TestAlphanumericWithSpaceOnly = False
				Exit Function 	
	    End Select
	Next i
End Function

Public Function TestPIN(lstr_check As String) As Boolean
	&apos;allowed characters A to Z, a to z And Blank
	Dim i As Integer
	Dim ia As Integer
	Dim ina As Integer
	Dim stlen As Integer
	Dim ascChr As Integer
	stlen = Len(lstr_check)
	ia = 0
	TestPIN = True		
	If(stlen &lt;&gt; 11) Then 
		&apos;ina = 1
		TestPIN = False
		If (stlen =0 ) Then 
			TestPIN = True
		End If	
		Exit Function 
	
	Else
		For i = 1 To 11
			curChar = (Mid(lstr_check, i, 1))
			If i = 1  And (curChar &lt;&gt; &quot;P&quot; and curChar &lt;&gt; &quot;p&quot; and curChar &lt;&gt; &quot;A&quot; and curChar &lt;&gt; &quot;a&quot;) Then
				&apos;ina = 1
				TestPIN = False
				Exit Function 	
			ElseIf i &gt; 1 and i &lt; 11 Then
		    	Select Case curChar
		        	Case &quot;0&quot; To &quot;9&quot;          &apos;A to Z
		            	ia = ia + 1		           
			        Case Else
			            &apos;ina = 1
			            TestPIN = False
			            Exit Function 	
			    End Select
			ElseIf i = 11 Then
				Select Case curChar
		        	Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
		            	ia = ia + 1
		            Case &quot;a&quot; To &quot;z&quot;          &apos;A to Z
		            	ia = ia + 1	
		        	Case Else
				    	TestPIN = False
			            Exit Function 	
				End Select	
			End If   
		Next i
	End If
End Function

Public Function TestPINMain(lstr_check As String) As Boolean
	&apos;allowed characters A to Z, a to z And Blank
	Dim i As Integer
	Dim ia As Integer
	Dim ina As Integer
	Dim stlen As Integer
	Dim ascChr As Integer
	stlen = Len(lstr_check)
	ia = 0
	TestPINMain = True		
	If(stlen &lt;&gt; 11) Then 
		&apos;ina = 1
		TestPINMain = False
		If (stlen =0 ) Then 
			TestPINMain = True
		End If	
		Exit Function 
	
	Else
		For i = 1 To 11
			curChar = (Mid(lstr_check, i, 1))
			If i = 1  And (curChar &lt;&gt; &quot;A&quot; and curChar &lt;&gt; &quot;a&quot;) Then
				&apos;ina = 1
				TestPINMain = False
				Exit Function 	
			ElseIf i &gt; 1 and i &lt; 11 Then
		    	Select Case curChar
		        	Case &quot;0&quot; To &quot;9&quot;          &apos;A to Z
		            	ia = ia + 1		           
			        Case Else
			            &apos;ina = 1
			            TestPINMain = False
			            Exit Function 	
			    End Select
			ElseIf i = 11 Then
				Select Case curChar
		        	Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
		            	ia = ia + 1
		            Case &quot;a&quot; To &quot;z&quot;          &apos;A to Z
		            	ia = ia + 1	
		        	Case Else
				    	TestPINMain = False
			            Exit Function 	
				End Select	
			End If   
		Next i
	End If
End Function

Public Function TestNonIndiPIN(lstr_check As String) As Boolean
	&apos;allowed characters A to Z, a to z And Blank
	Dim i As Integer
	Dim ia As Integer
	Dim ina As Integer
	Dim stlen As Integer
	Dim ascChr As Integer
	stlen = Len(lstr_check)
	ia = 0
	TestNonIndiPIN = True		
	If(stlen &lt;&gt; 11) Then 
		&apos;ina = 1
		TestNonIndiPIN = False
		If (stlen =0 ) Then 
			TestNonIndiPIN = True
		End If	
		Exit Function 
	
	Else
		For i = 1 To 11
			curChar = (Mid(lstr_check, i, 1))
			If i = 1  And (curChar &lt;&gt; &quot;P&quot; and curChar &lt;&gt; &quot;p&quot;) Then
				&apos;ina = 1
				TestNonIndiPIN = False
				Exit Function 	
			ElseIf i &gt; 1 and i &lt; 11 Then
		    	Select Case curChar
		        	Case &quot;0&quot; To &quot;9&quot;          &apos;A to Z
		            	ia = ia + 1		           
			        Case Else
			            &apos;ina = 1
			            TestNonIndiPIN = False
			            Exit Function 	
			    End Select
			ElseIf i = 11 Then
				Select Case curChar
		        	Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
		            	ia = ia + 1
		            Case &quot;a&quot; To &quot;z&quot;          &apos;A to Z
		            	ia = ia + 1	
		        	Case Else
				    	TestNonIndiPIN = False
			            Exit Function 	
				End Select	
			End If   
		Next i
	End If
End Function

Public Function TestNumber(lstr_check As String) As Boolean
	&apos;allowed characters 0 to 9 and .
	Dim i As Integer
	Dim ia As Integer
	&apos;Dim ina As Integer
	Dim stlen As Integer
		
	stlen = Len(lstr_check)
	ia = 0
	&apos;ina = 0
	TestNumber = True
	For i = 1 To stlen
	    Select Case (Mid(lstr_check, i, 1))
	        Case &quot;0&quot; To &quot;9&quot;          &apos;0 to 9
	        	ia = ia + 1
	        Case Else
	            &apos;ina = ina + 1
	            TestNumber = False
	            Exit Function
	    End Select
	Next i
End Function

&apos;validateCurrencyFormat
Public Function validateCurrencyFormat(lstr_check As String) As Boolean
	&apos;allowed characters 0 to 9 and .
	Dim i As Integer
	Dim ia As Integer
	Dim ina As Integer
	Dim stlen As Integer
	Dim dotCount As Integer
	stlen = Len(lstr_check)
	ia = 0
	ina = 0
	validateCurrencyFormat = True
	For i = 1 To stlen
		Select Case (Mid(lstr_check, i, 1))
	    	Case &quot;-&quot;
	        	ia = ia + 1
	       	Case &quot;,&quot;
	        	ia = ia + 1	       	
	       	Case &quot;.&quot;
	        	ia = ia + 1
	        	dotCount = dotCount + 1
	        Case &quot;0&quot; To &quot;9&quot;          &apos;0 to 9
	        	ia = ia + 1
	        Case Else
	            ina = ina + 1
	            validateCurrencyFormat = False
	            Exit Function
	    End Select
	Next i
	If dotCount &gt; 1 Then
		validateCurrencyFormat = False
	End If
End Function
Public Function TestDate(strDate As String) As Boolean
    Dim strMonth As String
    Dim strDay As String
    Dim strYear As String
    Dim validDay As Boolean
    Dim validMonth As Boolean
    Dim validYear As Boolean
    validDay = False
    validMonth = False
    validYear = False
    Dim validFormat As Boolean
    Dim i As Integer
    Dim Length As Integer
    Dim temp As String
    Dim index1 As Integer
    Dim index2 As Integer
    Dim flag As Integer
    
    TestDate = False
        
    If IsDate(strDate) = True Then
       Length = Len(strDate)
       flag = 0
      
       If (Length &gt; 10) Then
            validFormat = False
       Else
       		
            validFormat = True
            For i = 1 To Length
                If (Mid(strDate, i, 1) = &quot;/&quot;) Then
                    flag = flag + 1
                    
                    If (flag = 1) Then
                        index1 = i
                    End If
                    If (flag = 2) Then
                        index2 = i
                    End If
                    
                End If
            Next i
            If (index1 &gt; 0 And index2 &gt; 0) Then
            strDay = Mid(strDate, 1, index1 - 1)
            If (Len(strDay) &gt; 2) Then
                validDay = False
            Else
                If IsNumeric(strDay) = True Then
                    If Val(strDay) &gt; 32 Then
                        validDay = False
                    Else
                        validDay = True
                    End If
                Else
                    validDay = True
                End If
            End If
            
            
            strMonth = Mid(strDate, index1 + 1, (index2 - index1) - 1)
            If (Len(strMonth) &gt; 2) Then
                validDay = False
            Else
                If IsNumeric(strMonth) = True Then
                    If Val(strMonth) &gt; 12 Then
                        validMonth = False
                    Else
                        validMonth = True
                    End If
                Else
                    validMonth = True
                End If
            End If
            
            strYear = Mid(strDate, index2 + 1, Len(strDate))
            If (Len(strYear) &gt; 4) Then
                validYear = False
            Else
            
                If IsNumeric(strYear) = True Then
                    validYear = True
                Else
                    validYear = False
                End If
            End If
       End If
       End If
        If (validFormat = False Or validDay = False Or validMonth = False Or validYear = False) Then
            If Length=0 then 
	           TestDate = True       			
       		Else
               TestDate = False
            End If   
        Else
	        
               TestDate = True
        End If
    End If
    
 End Function


Function ValidateDate(EnteredDate As String) As Boolean
	ValidateDate = True
	Dim i as Integer
	Dim enDate as Integer
	Dim enMonth as Integer
	Dim enYear as Integer
	if Len(Trim(EnteredDate))=0 then
			ValidateDate = True
			Exit Function
	End If
	if Len(Trim(EnteredDate)) &lt;&gt; 10 and Len(Trim(EnteredDate)) &lt;&gt; 0 then
		ValidateDate = False
		EXIT FUNCTION
	else
		for i= 1 to Len(EnteredDate)
			curChar = (Mid(EnteredDate, i, 1))
			if i = 3 or i = 6 then
				Select Case (curChar)
					Case &quot;/&quot;
					Case Else
						ValidateDate = False
							EXIT FUNCTION
				end select
			else
				Select Case (curChar)
					Case &quot;0&quot; To &quot;9&quot;
					Case Else
						ValidateDate = False
							EXIT FUNCTION
				end select
			end if
		Next i	
	end if
	enDate = Int((Mid(EnteredDate, 1, 2)))
	enMonth = Int((Mid(EnteredDate, 4, 2)))
	enYear = Int((Mid(EnteredDate, 7,4)))
	yearMod = INT(enYear / 4)
	&apos;Added By Arjun to avoid 00/00/0000
	if enDate=0 or enMonth=0 or enYear=0 then
		ValidateDate = False
		EXIT FUNCTION
	End if
	if (yearMod * 4)  &lt;&gt; enYear then

		if enMonth &gt; 12 then
			ValidateDate = False
					EXIT FUNCTION
		else
			if enMonth &lt;&gt; 2 then
				if enMonth = 1 or enMonth = 3 or enMonth = 5 or enMonth= 7 or enMonth = 8 or enmonth = 10 or enmonth = 12 then
					if enDate &gt; 31 then
						ValidateDate = False
								EXIT FUNCTION
					end if
				else
					if enDate &gt; 30 then
						ValidateDate = False
								EXIT FUNCTION
					end if	
				end if
			else
				if enDate &gt; 28 then
					ValidateDate = False
							EXIT FUNCTION
				end if
			end if
		end if
	else
		if enMonth &gt; 12 then
			ValidateDate = False
		else
			if enMonth &lt;&gt; 2 then
				if enMonth = 1 or enMonth = 3 or enMonth = 5 or enMonth= 7 or enMonth = 8 or enmonth = 10 or enmonth = 12 then
					if enDate &gt; 31 then
						ValidateDate = False
								EXIT FUNCTION
					end if
				else
					if enDate &gt; 30 then
						ValidateDate = False
								EXIT FUNCTION
					end if	
				end if
			else
				if enDate &gt; 29 then
					ValidateDate = False
							EXIT FUNCTION
				end if
			end if
		end if
	end if
	
end Function 

Public Function CompareValuesSelf() As Boolean
unprotectsheet(&quot;C_Balance_Sheet&quot;)
Dim value1 as Double
Dim value2 as Double
Dim value3 as Double
Dim doCheck as String

value1 =    ThisComponent.Sheets.getByName(&quot;C_Balance_Sheet&quot;).getCellrangeByName(&quot;BalSt.TotalAStS&quot;).value
value2 =    ThisComponent.Sheets.getByName(&quot;C_Balance_Sheet&quot;).getCellrangeByName(&quot;BalSt.ProprietorFundLngTrmLaibtyS&quot;).value
doCheck = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareSelfBusIncome&quot;).string

	If format(value1,&quot;#,##0.00&quot;)&lt;&gt;format(value2,&quot;#,##0.00&quot;) then
		CompareValuesSelf=False
	Else
		CompareValuesSelf=True
	End If
protectsheet(&quot;C_Balance_Sheet&quot;)
End Function

Public Function CompareValuesWife() As Boolean
unprotectsheet(&quot;C_Balance_Sheet&quot;)
Dim value1 as Double
Dim value2 as Double
Dim value3 as Double
Dim doCheck as String

value1 =    ThisComponent.Sheets.getByName(&quot;C_Balance_Sheet&quot;).getCellrangeByName(&quot;BalSt.TotalAStW&quot;).value
value2 =    ThisComponent.Sheets.getByName(&quot;C_Balance_Sheet&quot;).getCellrangeByName(&quot;BalSt.ProprietorFundLngTrmLaibtyW&quot;).value
doCheck = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareWifeBusIncome&quot;).string

	If format(value1,&quot;#,##0.00&quot;)&lt;&gt;format(value2,&quot;#,##0.00&quot;) then
		CompareValuesWife=False
	Else
		CompareValuesWife=True
	End If
protectsheet(&quot;C_Balance_Sheet&quot;)
End Function

Public Function CompareSumValueSelf() As Boolean
unprotectsheet(&quot;A_Basic_Info&quot;)
unprotectsheet(&quot;B_Profit_Loss_Account_Self&quot;)

Dim value as Double
Dim sum1 as Double
Dim sum2 as Double
Dim doCheck as String

value =    ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RentPaid.GrossRentalIncomeS&quot;).value
sum1 =     ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.RentPermisesS&quot;).value
sum2 =     ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.RentEmployeeS&quot;).value
doCheck = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareSelfBusIncome&quot;).string

If doCheck=&quot;Yes&quot; then
	If Cdbl(format(value,&quot;#,##0.00&quot;))&lt;&gt;(Cdbl(format(sum1,&quot;#,##0.00&quot;))+Cdbl(format(sum2,&quot;#,##0.00&quot;))) Then
	    CompareSumValueSelf=False
	Else
	    CompareSumValueSelf=True
	End If
Else
	CompareSumValueSelf=True
End If
protectsheet(&quot;B_Profit_Loss_Account_Self&quot;)
protectsheet(&quot;A_Basic_Info&quot;)
End Function

Public Function CompareSumValueWife() As Boolean
unprotectsheet(&quot;A_Basic_Info&quot;)
unprotectsheet(&quot;B_Profit_Loss_Account_Wife&quot;)

Dim value as Double
Dim sum1 as Double
Dim sum2 as Double
Dim doCheck as String

value =    ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RentPaid.GrossRentalIncomeW&quot;).value
sum1 =     ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.RentPermisesW&quot;).value
sum2 =     ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.RentEmployeeW&quot;).value
doCheck = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareWifeBusIncome&quot;).string

If doCheck=&quot;Yes&quot; then
	If Cdbl(format(value,&quot;#,##0.00&quot;))&lt;&gt;(Cdbl(format(sum1,&quot;#,##0.00&quot;))+Cdbl(format(sum2,&quot;#,##0.00&quot;))) Then
	    CompareSumValueWife=False
	Else
	    CompareSumValueWife=True
	End If
Else
	CompareSumValueWife=True
End If
protectsheet(&quot;B_Profit_Loss_Account_Wife&quot;)
protectsheet(&quot;A_Basic_Info&quot;)
End Function

Public Function CompareProfitShareTotSelf() As Boolean
unprotectsheet(&quot;G_Partnership_Income&quot;)
unprotectsheet(&quot;T_Income_Computation_Self&quot;)
Dim value1 as Double
Dim value2 as Double

value1 =    ThisComponent.Sheets.getByName(&quot;G_Partnership_Income&quot;).getCellrangeByName(&quot;ProfitShare.ListSTO&quot;).value
value2 =    ThisComponent.Sheets.getByName(&quot;T_Income_Computation_Self&quot;).getCellrangeByName(&quot;TaxComp.chargeableIncomePartS&quot;).value

	If format(value1,&quot;#,##0.00&quot;)&lt;&gt;format(value2,&quot;#,##0.00&quot;) then
		CompareProfitShareTotSelf=False
	Else
		CompareProfitShareTotSelf=True
	End If

protectsheet(&quot;T_Income_Computation_Self&quot;)
protectsheet(&quot;G_Partnership_Income&quot;)
End Function

Public Function CompareProfitShareTotWife() As Boolean
unprotectsheet(&quot;G_Partnership_Income&quot;)
unprotectsheet(&quot;T_Income_Computation_Wife&quot;)
Dim value1 as Double
Dim value2 as Double
value1 =    ThisComponent.Sheets.getByName(&quot;G_Partnership_Income&quot;).getCellrangeByName(&quot;ProfitShare.ListWTO&quot;).value
value2 =    ThisComponent.Sheets.getByName(&quot;T_Income_Computation_Wife&quot;).getCellrangeByName(&quot;TaxComp.chargeableIncomePartW&quot;).value

If format(value1,&quot;#,##0.00&quot;)&lt;&gt;format(value2,&quot;#,##0.00&quot;) then
	CompareProfitShareTotWife=False
Else
	CompareProfitShareTotWife=True
End If

protectsheet(&quot;T_Income_Computation_Wife&quot;)
protectsheet(&quot;G_Partnership_Income&quot;)
End Function

Public Function PinAuditCheckSelf(ByVal cellVal as String) As Boolean
Dim pinOfAuditor as String
Dim nameOfAuditor as String
Dim dateOfAudit as String

pinOfAuditor=ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;audit.PINOfAuditorS&quot;).string
nameOfAuditor=ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;audit.NameOfAuditorS&quot;).string
dateOfAudit=ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;audit.DateOfAuditCertiS&quot;).string

if (pinOfAuditor&lt;&gt;&quot;&quot; or nameOfAuditor&lt;&gt;&quot;&quot; or dateOfAudit&lt;&gt;&quot;&quot;) then
	if Trim(cellVal)&lt;&gt;&quot;&quot; then
		PinAuditCheckSelf=True
	Else
		PinAuditCheckSelf=False
	End If
Else
	PinAuditCheckSelf=True
End if

End Function

Public Function PinAuditCheckWife(ByVal cellVal as String) As Boolean
unprotectsheet(&quot;A_Basic_Info&quot;)
Dim pinOfAuditor as String
Dim nameOfAuditor as String
Dim dateOfAudit as String

pinOfAuditor=ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;audit.PINOfAuditorW&quot;).string
nameOfAuditor=ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;audit.NameOfAuditorW&quot;).string
dateOfAudit=ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;audit.DateOfAuditCertiW&quot;).string

if (pinOfAuditor&lt;&gt;&quot;&quot; or nameOfAuditor&lt;&gt;&quot;&quot; or dateOfAudit&lt;&gt;&quot;&quot;) then
	if Trim(cellVal)&lt;&gt;&quot;&quot; then
		PinAuditCheckWife=True
	Else
		PinAuditCheckWife=False
	End If
Else
	PinAuditCheckWife=True
End if

protectsheet(&quot;A_Basic_Info&quot;)
End Function

Public Function CompareEstateTotSelf() As Boolean
unprotectsheet(&quot;H_Estate_Trust_Income&quot;)
unprotectsheet(&quot;T_Income_Computation_Self&quot;)
Dim value1 as Double
Dim value2 as Double
value1 =    ThisComponent.Sheets.getByName(&quot;H_Estate_Trust_Income&quot;).getCellrangeByName(&quot;EstateTrust.ListTOS&quot;).value
value2 =    ThisComponent.Sheets.getByName(&quot;T_Income_Computation_Self&quot;).getCellrangeByName(&quot;TaxComp.chargeableIncomeEstateTrustS&quot;).value

If format(value1,&quot;#,##0.00&quot;)&lt;&gt;format(value2,&quot;#,##0.00&quot;) then
	CompareEstateTotSelf=False
Else
	CompareEstateTotSelf=True
End If

protectsheet(&quot;T_Income_Computation_Self&quot;)
protectsheet(&quot;H_Estate_Trust_Income&quot;)
End Function

Public Function CompareEstateTotWife() As Boolean
unprotectsheet(&quot;H_Estate_Trust_Income&quot;)
unprotectsheet(&quot;T_Income_Computation_Wife&quot;)
Dim value1 as Double
Dim value2 as Double
value1 =    ThisComponent.Sheets.getByName(&quot;H_Estate_Trust_Income&quot;).getCellrangeByName(&quot;EstateTrust.ListTOW&quot;).value
value2 =    ThisComponent.Sheets.getByName(&quot;T_Income_Computation_Wife&quot;).getCellrangeByName(&quot;TaxComp.chargeableIncomeEstateTrustW&quot;).value

If format(value1,&quot;#,##0.00&quot;)&lt;&gt;format(value2,&quot;#,##0.00&quot;) then
	CompareEstateTotWife=False
Else
	CompareEstateTotWife=True
End If

protectsheet(&quot;T_Income_Computation_Wife&quot;)
protectsheet(&quot;H_Estate_Trust_Income&quot;)
End Function

 
Public Function TestDateBtwnRtnPeriod(ByVal value As String) As Boolean
Dim mm As Integer
Dim yr As Integer
Dim startDate As String
Dim endDate As String
Dim sheet As Object
Dim startMon as Integer
Dim endMon as Integer
Dim currMon as Integer

Dim startDt as Object
Dim endDt as Object
Dim currDt as Object

unprotectsheet(&quot;A_Basic_Info&quot;)
&apos;-&gt;Arjun
if(ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string&lt;&gt;&quot;&quot; and ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string&lt;&gt;&quot;&quot;)then
	startDate =    ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string
	endDate =     ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string
	
	startDt= Split( startDate,&quot;/&quot;)
	endDt= Split( endDate,&quot;/&quot;)
	currDt= Split( value,&quot;/&quot;)
	
	If ValidateDate(value) = True And ValidateDate(startDate) = True And ValidateDate(endDate) = True Then
	    If lessThnEqualToReturnYr(value,INT(endDt(2)),INT(endDt(1)),INT(endDt(0))) and greaterThnEqualToReturnYr(value,INT(startDt(2)),INT(startDt(1)),INT(startDt(0))) then
		    TestDateBtwnRtnPeriod = True
	    Else
	        TestDateBtwnRtnPeriod = False    
	    End If    
	Else
	        TestDateBtwnRtnPeriod = False
	End If
Else
	TestDateBtwnRtnPeriod = True
End If	
protectsheet(&quot;A_Basic_Info&quot;)
End Function

Public Function TestAuditDate(ByVal value As String) As Boolean
Dim mm As Integer
Dim yr As Integer
Dim startDate As String
Dim endDate As String
Dim sheet As Object
Dim startMon as Integer
Dim endMon as Integer
Dim currMon as Integer
Dim auditDate as String
Dim startDt as Object
Dim endDt as Object
Dim currDt as Object

unprotectsheet(&quot;A_Basic_Info&quot;)
&apos;-&gt;Arjun
if(ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string&lt;&gt;&quot;&quot; and ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.dateforAuditCertificate&quot;).string&lt;&gt;&quot;&quot;)then
	auditDate =    ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.dateforAuditCertificate&quot;).string
	endDate =     ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string
	
	auditDt= Split( auditDate,&quot;/&quot;)
	endDt= Split( endDate,&quot;/&quot;)
	currDt= Split( value,&quot;/&quot;)
	
	If ValidateDate(value) = True And ValidateDate(auditDate) = True And ValidateDate(endDate) = True Then
	    If grtrThnReturnYr(value,INT(endDt(2)),INT(endDt(1)),INT(endDt(0))) and lessThnEqualToReturnYr(value,INT(auditDt(2)),INT(auditDt(1)),INT(auditDt(0))) then
		    TestAuditDate = True
	    Else
	        TestAuditDate = False    
	    End If    
	Else
	        TestAuditDate = False
	End If
Else
	TestAuditDate = True
End If
protectsheet(&quot;A_Basic_Info&quot;)
End Function

Public Function checkDateOfDeposit(ByVal value As String) As Boolean
Dim startDate as String
Dim endDate as String

checkDateOfDeposit = True

unprotectsheet(&quot;A_Basic_Info&quot;)
&apos;-&gt;Arjun
if(ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string&lt;&gt;&quot;&quot; and ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string&lt;&gt;&quot;&quot;)then
	startDate =    ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string
	endDate =   ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string
	
	If value&lt;&gt;&quot;&quot; then
	          If  ValidateDate(value) then
		           If checkGrtrThnDate(value,endDate)=False then
		   		   			checkDateOfDeposit = False
		  	       End If
			  Else
			  		checkDateOfDeposit = False
			  End If	 
	         End If
Else
	checkDateOfDeposit = True
End If
protectsheet(&quot;A_Basic_Info&quot;)
End Function

Public Function checkDateOfDepositInstallment(ByVal value As String) As Boolean
Dim startDate as String
Dim endDate as String

checkDateOfDepositInstallment = True

unprotectsheet(&quot;A_Basic_Info&quot;)
&apos;-&gt;Arjun
if(ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string&lt;&gt;&quot;&quot; and ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string&lt;&gt;&quot;&quot;)then
	startDate =    ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string
	endDate =   ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string
	If value&lt;&gt;&quot;&quot; and startDate&lt;&gt;&quot;&quot; and endDate&lt;&gt;&quot;&quot; then
	          If  ValidateDate(value) then
		           If TestDateBtwnRtnPeriod(value)=False then
		   		   			checkDateOfDepositInstallment = False
		  	       End If
			  Else
			  		checkDateOfDepositInstallment = False
			  End If	 
	         End If
Else
	checkDateOfDepositInstallment = True
End If
protectsheet(&quot;A_Basic_Info&quot;)
End Function

Public Function TestAlphabet(lstr_check As String) As Boolean
&apos;allowed characters A to Z, a to z And Blank
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
            ia = ia + 1
        Case &quot;a&quot; To &quot;z&quot;          &apos;a to z
            ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphabet = True
Else
    TestAlphabet = False
End If

End Function


Public Function TestAlphabetWithSpace(lstr_check As String) As Boolean
&apos;allowed characters A to Z, a to z And Blank
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
            ia = ia + 1
        Case &quot;a&quot; To &quot;z&quot;          &apos;a to z
            ia = ia + 1
        Case &quot; &quot;                 &apos; Blank
            ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphabetWithSpace = True
Else
    TestAlphabetWithSpace = False
End If

End Function


Public Function TestAlphabetNumSpl(lstr_check As String) As Boolean
&apos;allowed characters A to Z, a to z And Blank
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
            ia = ia + 1
        Case &quot;a&quot; To &quot;z&quot;          &apos;a to z
            ia = ia + 1
        Case &quot;0&quot; To &quot;9&quot;          &apos;0 to 9
            ia = ia + 1
       Case &quot; &quot;, &quot;,&quot;, &quot;.&quot;, &quot;-&quot;, &quot;/&quot;,&quot;&apos;&quot;,&quot;:&quot;,&quot;&amp;&quot;, &quot;(&quot;, &quot;)&quot;, &quot;`&quot;, &quot;$&quot;, &quot;%&quot;, &quot;}&quot;, &quot;$&quot;, &quot;}&quot;, &quot;{&quot; , &quot;!&quot;, &quot;|&quot; ,&quot;#&quot;, &quot;;&quot;, &quot;\&quot;   &apos;, &quot;[&quot;, &quot;]&quot;   &apos; Blank
            ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphabetNumSpl = True
Else
    TestAlphabetNumSpl = False
End If

End Function

&apos; Added by vaishali gohil
&apos;Added for bank account holder name
Public Function TestAlphaNumericForAccName(lstr_check As String) As Boolean
&apos;allowed characters A to Z, a to z And Blank
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
            ia = ia + 1
        Case &quot;a&quot; To &quot;z&quot;          &apos;a to z
            ia = ia + 1
        Case &quot;0&quot; To &quot;9&quot;          &apos;0 to 9
            ia = ia + 1
      Case &quot; &quot;, &quot;,&quot;, &quot;.&quot;, &quot;-&quot;, &quot;/&quot;,&quot;&apos;&quot;,&quot;:&quot;,&quot;&amp;&quot;, &quot;(&quot;, &quot;)&quot;,&quot;_&quot;
                  ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphaNumericForAccName = True
Else
    TestAlphaNumericForAccName = False
End If

End Function 

Public Function specificDateBeforeYears(ByVal value As String,ByVal yearGap as Integer) As String
Dim currDt as Object
Dim newDt as String
Dim intYear
&apos;Dim a
&apos;a = Array(&quot;01&quot;, &quot;02&quot;, &quot;03&quot;, &quot;04&quot;, &quot;05&quot;, &quot;06&quot;, &quot;07&quot;, &quot;08&quot;, &quot;09&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot;)

If value&lt;&gt;&quot;&quot; Then
		currDt= Split(value,&quot;/&quot;)
		&apos;Day &amp; Month
		newDt=currDt(0)&amp; &quot;/&quot; &amp; currDt(1)
		&apos;Year
		intYear=INT(currDt(2))
		intYear=intYear-yearGap
		newDt=newDt &amp; &quot;/&quot; &amp; Cstr(intYear)
		&apos;msgbox newDt
		specificDateBeforeYears=newDt
	End If
	
End Function

Public Function checkFutureDate(ByVal value As String) As Boolean
Dim mm As Integer
Dim yr As Integer
Dim dd as Integer
Dim strDate As Object
Dim currDate as Object
&apos;mm = Format(CDate(Trim(value)), &quot;MM&quot;)
&apos;yr = Format(CDate(Trim(value)), &quot;yyyy&quot;)
&apos;dd = Format(CDate(Trim(value)), &quot;dd&quot;)
If(Len(Trim(value))=0) then
	checkFutureDate=True
	Exit function
End If
if ValidateDate(value) then
 strDate= Split(value, &quot;/&quot;)
 dd= INT(strDate(0))
 mm= INT(strDate(1))
 yr= INT(strDate(2))

currDate= Split( Format(Now(), &quot;dd/mm/yyyy&quot;),&quot;/&quot;)
&apos;If yr = Format(Now(), &quot;yyyy&quot;) Then
If yr= INT(currDate(2)) then
	Dim mon as Integer
	Dim dayD as Integer 
	mon= INT(currDate(1))
	dayD = INT(currDate(0))
    If mm &lt; mon Then
      checkFutureDate = True
    ElseIf mm=mon then
    	If dd&lt;=dayD then
    		checkFutureDate = True
    	Else	
	      checkFutureDate = False
	    End If   
	Else
	 checkFutureDate = False
	End If
    
ElseIf yr &lt; currDate(2) And mm &lt;= 12 Then
        checkFutureDate = True
	Else
    	checkFutureDate = False
End If
End If
End Function

&apos;Arjun
Public Function specificYearBeforeDate(ByVal value As String,ByVal yearGap as Integer,ByVal dd as String) As String
Dim currDt as Object
Dim newDt as String
Dim intYear
&apos;Dim a
&apos;a = Array(&quot;01&quot;, &quot;02&quot;, &quot;03&quot;, &quot;04&quot;, &quot;05&quot;, &quot;06&quot;, &quot;07&quot;, &quot;08&quot;, &quot;09&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot;)

If value&lt;&gt;&quot;&quot; Then
		currDt= Split(value,&quot;/&quot;)
		&apos;Day
		newDt=dd &amp; &quot;/&quot;
		&apos;Month
		if currDt(1)=&quot;01&quot; then
			newDt=newDt &amp; &quot;02&quot;
			ElseIf currDt(1)=&quot;02&quot; then
			newDt=newDt &amp; &quot;03&quot;
			ElseIf currDt(1)=&quot;03&quot; then
			newDt=newDt &amp; &quot;04&quot;
			ElseIf currDt(1)=&quot;04&quot; then
			newDt=newDt &amp; &quot;05&quot;
			ElseIf currDt(1)=&quot;05&quot; then
			newDt=newDt &amp; &quot;06&quot;
			ElseIf currDt(1)=&quot;06&quot; then
			newDt=newDt &amp; &quot;07&quot;
			ElseIf currDt(1)=&quot;07&quot; then
			newDt=newDt &amp; &quot;08&quot;
			ElseIf currDt(1)=&quot;08&quot; then
			newDt=newDt &amp; &quot;09&quot;
			ElseIf currDt(1)=&quot;09&quot; then
			newDt=newDt &amp; &quot;10&quot;
			ElseIf currDt(1)=&quot;10&quot; then
			newDt=newDt &amp; &quot;11&quot;
			ElseIf currDt(1)=&quot;11&quot; then
			newDt=newDt &amp; &quot;12&quot;
			ElseIf currDt(1)=&quot;12&quot; then
			newDt=newDt &amp; &quot;01&quot;
		End If
		&apos;Year
		intYear=INT(currDt(2))
		intYear=intYear-yearGap
		newDt=newDt &amp; &quot;/&quot; &amp; Cstr(intYear)
		&apos;msgbox newDt
		specificYearBeforeDate=newDt
	End If
	
End Function

&apos;Arjun
Public Function lessThnEqualToReturnYr(ByVal value As String,ByVal year as Integer,ByVal month as Integer,ByVal day as Integer) As Boolean
Dim mm As Integer
Dim yr As Integer
Dim dd as Integer
Dim strDate As Object
Dim currDate as Object
Dim returnDate As Date

returnDate = DateSerial(year, month, day)

If(Len(Trim(value))=0) then
	lessThnEqualToReturnYr=True
	Exit function
End If
if ValidateDate(value) then
 strDate= Split(value, &quot;/&quot;)
 dd= INT(strDate(0))
 mm= INT(strDate(1))
 yr= INT(strDate(2))

currDate= Split( Format(returnDate, &quot;dd/mm/yyyy&quot;),&quot;/&quot;)
&apos;If yr = Format(Now(), &quot;yyyy&quot;) Then
If yr= INT(currDate(2)) then
	Dim mon as Integer
	Dim dayD as Integer 
	mon= INT(currDate(1))
	dayD = INT(currDate(0))
    If mm &lt; mon Then
      lessThnEqualToReturnYr = True
    ElseIf mm=mon then
    	If dd&lt;=dayD then
    		lessThnEqualToReturnYr = True
    	Else	
	      lessThnEqualToReturnYr = False
	    End If   
	Else
	 lessThnEqualToReturnYr = False
	End If
    
ElseIf yr &lt; currDate(2) And mm &lt;= 12 Then
        lessThnEqualToReturnYr = True
	Else
    	lessThnEqualToReturnYr = False
End If
End If
End Function
&apos;Arjun
Public Function grtrThnReturnYr(ByVal value As String,ByVal year as Integer,ByVal month as Integer,ByVal day as Integer) As Boolean
Dim mm As Integer
Dim yr As Integer
Dim dd as Integer
Dim strDate As Object
Dim currDate as Object
Dim returnDate As Date

returnDate = DateSerial(year, month, day)

If(Len(Trim(value))=0) then
	grtrThnReturnYr=True
	Exit function
End If
if ValidateDate(value) then
 strDate= Split(value, &quot;/&quot;)
 dd= INT(strDate(0))
 mm= INT(strDate(1))
 yr= INT(strDate(2))

currDate= Split( Format(returnDate, &quot;dd/mm/yyyy&quot;),&quot;/&quot;)
&apos;If yr = Format(Now(), &quot;yyyy&quot;) Then
If yr= INT(currDate(2)) then
	Dim mon as Integer
	Dim dayD as Integer 
	mon= INT(currDate(1))
	dayD = INT(currDate(0))
    If mm &lt; mon Then
      grtrThnReturnYr = False
    ElseIf mm=mon then
    	If dd&lt;=dayD then
    		grtrThnReturnYr = False
    	Else	
	      grtrThnReturnYr = True
	    End If   
	Else
	 grtrThnReturnYr = True
	End If
    
ElseIf yr &lt; currDate(2) And mm &lt;= 12 Then
        grtrThnReturnYr = False
	Else
    	grtrThnReturnYr = True
End If
End If
End Function

sub aaryan
sheet=ThisComponent.sheets.getByName(&quot;B_Profit_Loss_Account&quot;)
curCell = sheet.getCellrangeByName(&quot;C6:C6&quot;)
if curCell.isMerged()=True then
msgbox &quot;hello&quot;
else
msgbox &quot;no hello&quot;
end if

end sub

&apos;Arjun
Public Function greaterThnEqualToReturnYr(ByVal value As String,ByVal year as Integer,ByVal month as Integer,ByVal day as Integer) As Boolean
Dim mm As Integer
Dim yr As Integer
Dim dd as Integer
Dim strDate As Object
Dim currDate as Object
Dim returnDate As Date

returnDate = DateSerial(year, month, day)

If(Len(Trim(value))=0) then
	greaterThnEqualToReturnYr=True
	Exit function
End If
if ValidateDate(value) then
 strDate= Split(value, &quot;/&quot;)
 dd= INT(strDate(0))
 mm= INT(strDate(1))
 yr= INT(strDate(2))

currDate= Split( Format(returnDate, &quot;dd/mm/yyyy&quot;),&quot;/&quot;)
&apos;If yr = Format(Now(), &quot;yyyy&quot;) Then
If yr= INT(currDate(2)) then
	Dim mon as Integer
	Dim dayD as Integer 
	mon= INT(currDate(1))
	dayD = INT(currDate(0))
    If mm &lt; mon Then
      greaterThnEqualToReturnYr = False
    ElseIf mm=mon then
    	If dd&lt;dayD then
    		greaterThnEqualToReturnYr = False
    	Else	
	      greaterThnEqualToReturnYr = True
	    End If   
	Else
	 greaterThnEqualToReturnYr = True
	End If
    
ElseIf yr &lt; currDate(2) And mm &lt;= 12 Then
        greaterThnEqualToReturnYr = False
	Else
    	greaterThnEqualToReturnYr = True
End If
End If
End Function

&apos;added by Arjun
Public Function ValidateModelSerial(lstr_check As String) As Boolean
&apos;allowed characters A to Z, a to z And Blank
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
            ia = ia + 1
        Case &quot;a&quot; To &quot;z&quot;          &apos;a to z
            ia = ia + 1
        Case &quot;0&quot; To &quot;9&quot;          &apos;0 to 9
            ia = ia + 1
        Case &quot;/&quot;, &quot;,&quot;, &quot;-&quot;&apos;, &quot;-&quot;, &quot;#&quot;, &quot;/&quot;,&quot;:&quot; &apos;&quot;;&quot;, &quot;-&quot;, &quot;#&quot;, &quot;+&quot;, &quot;*&quot;, &quot;/&quot;, &quot;=&quot;, &quot;@&quot;, &quot;$&quot;, &quot;&amp;&quot;, &quot;%&quot; , &quot;(&quot;, &quot;)&quot; ,&quot;&gt;&quot;, &quot;&lt;&quot;   &apos; Blank
            ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    ValidateModelSerial = True
Else
    ValidateModelSerial = False
End If

End Function

Public Function checkGrtrThnDate(ByVal dateFrom As String,ByVal dateTo as String) As Boolean
Dim mm As Integer
Dim yr As Integer
Dim dd as Integer
Dim strDate As Object
Dim currDate as Object
&apos;mm = Format(CDate(Trim(value)), &quot;MM&quot;)
&apos;yr = Format(CDate(Trim(value)), &quot;yyyy&quot;)
&apos;dd = Format(CDate(Trim(value)), &quot;dd&quot;)
If(Len(Trim(dateFrom))=0) then
	checkGrtrThnDate=True
	Exit function
End If
If(Len(Trim(dateTo))=0) then
	checkGrtrThnDate=True
	Exit function
End If
if ValidateDate(dateFrom) then
 strDate= Split(dateFrom, &quot;/&quot;)
 dd= INT(strDate(0))
 mm= INT(strDate(1))
 yr= INT(strDate(2))

currDate= Split(dateTo,&quot;/&quot;)
&apos;If yr = Format(Now(), &quot;yyyy&quot;) Then
If yr= INT(currDate(2)) then
	Dim mon as Integer
	Dim dayD as Integer 
	mon= INT(currDate(1))
	dayD = INT(currDate(0))
    If mm &lt; mon Then
      checkGrtrThnDate = True
    ElseIf mm=mon then
    	If dd&lt;=dayD then
    		checkGrtrThnDate = True
    	Else	
	      checkGrtrThnDate = False
	    End If   
	Else
	 checkGrtrThnDate = False
	End If
    
ElseIf yr &lt; currDate(2) And mm &lt;= 12 Then
        checkGrtrThnDate = True
	Else
    	checkGrtrThnDate = False
End If
End If
End Function

Public Function checkGrtrThnEqualToDate(ByVal dateFrom As String,ByVal dateTo as String) As Boolean
Dim mm As Integer
Dim yr As Integer
Dim dd as Integer
Dim strDate As Object
Dim currDate as Object
&apos;mm = Format(CDate(Trim(value)), &quot;MM&quot;)
&apos;yr = Format(CDate(Trim(value)), &quot;yyyy&quot;)
&apos;dd = Format(CDate(Trim(value)), &quot;dd&quot;)
If(Len(Trim(dateFrom))=0) then
	checkGrtrThnEqualToDate=True
	Exit function
End If
If(Len(Trim(dateTo))=0) then
	checkGrtrThnEqualToDate=True
	Exit function
End If
if ValidateDate(dateFrom) then
 strDate= Split(dateFrom, &quot;/&quot;)
 dd= INT(strDate(0))
 mm= INT(strDate(1))
 yr= INT(strDate(2))

currDate= Split(dateTo,&quot;/&quot;)
&apos;If yr = Format(Now(), &quot;yyyy&quot;) Then
If yr= INT(currDate(2)) then
	Dim mon as Integer
	Dim dayD as Integer 
	mon= INT(currDate(1))
	dayD = INT(currDate(0))
    If mm &lt; mon Then
      checkGrtrThnEqualToDate = True
    ElseIf mm=mon then
    	If dd&lt;dayD then
    		checkGrtrThnEqualToDate = True
    	Else	
	      checkGrtrThnEqualToDate = False
	    End If   
	Else
	 checkGrtrThnEqualToDate = False
	End If
    
ElseIf yr &lt; currDate(2) And mm &lt;= 12 Then
        checkGrtrThnEqualToDate = True
	Else
    	checkGrtrThnEqualToDate = False
End If
End If
End Function

&apos;Arjun
Public Function checkMaturityDate(ByVal commencementDate As String,ByVal maturityDate as String) As Boolean
Dim mm As Integer
Dim yr As Integer
Dim dd as Integer
Dim strDate As Object
Dim currDate as Object
&apos;mm = Format(CDate(Trim(value)), &quot;MM&quot;)
&apos;yr = Format(CDate(Trim(value)), &quot;yyyy&quot;)
&apos;dd = Format(CDate(Trim(value)), &quot;dd&quot;)
If(Len(Trim(commencementDate))=0) then
	checkGrtrThnDate=True
	Exit function
End If
If(Len(Trim(maturityDate))=0) then
	checkGrtrThnDate=True
	Exit function
End If
if ValidateDate(commencementDate) and ValidateDate(maturityDate) then
 strDate= Split(commencementDate, &quot;/&quot;)
 dd= INT(strDate(0))
 mm= INT(strDate(1))
 yr= INT(strDate(2))

currDate= Split(maturityDate,&quot;/&quot;)
&apos;If yr = Format(Now(), &quot;yyyy&quot;) Then
If yr= INT(currDate(2)) then
	Dim mon as Integer
	Dim dayD as Integer 
	mon= INT(currDate(1))
	dayD = INT(currDate(0))
    If mm &lt; mon Then
      checkGrtrThnDate = True
    ElseIf mm=mon then
    	If dd&lt;=dayD then
    		checkGrtrThnDate = True
    	Else	
	      checkGrtrThnDate = False
	    End If   
	Else
	 checkGrtrThnDate = False
	End If
    
ElseIf yr &lt; currDate(2) And mm &lt;= 12 Then
        checkGrtrThnDate = True
	Else
    	checkGrtrThnDate = False
End If
End If
End Function

&apos;Arjun
Public Function checkSpecificDate(ByVal value As String,ByVal day As Integer,ByVal month As Integer,ByVal year As Integer) As Boolean
Dim mm As Integer
Dim yr As Integer
Dim dd as Integer
Dim strDate As Object
Dim specificDate as Object
&apos;mm = Format(CDate(Trim(value)), &quot;MM&quot;)
&apos;yr = Format(CDate(Trim(value)), &quot;yyyy&quot;)
&apos;dd = Format(CDate(Trim(value)), &quot;dd&quot;)
If(Len(Trim(value))=0) then
	checkSpecificDate=True
	Exit function
End If
if ValidateDate(value) then
 strDate= Split(value, &quot;/&quot;)
 dd= INT(strDate(0))
 mm= INT(strDate(1))
 yr= INT(strDate(2))

&apos;The specific date is day-month-year
specificDate= Split( Format(DateSerial(year, month, day), &quot;dd/mm/yyyy&quot;),&quot;/&quot;)
&apos;If yr = Format(Now(), &quot;yyyy&quot;) Then
If yr= INT(specificDate(2)) then
	Dim mon as Integer
	Dim dayD as Integer 
	mon= INT(specificDate(1))
	dayD = INT(specificDate(0))
    If mm &lt; mon Then
      checkSpecificDate = False
    ElseIf mm=mon then
    	If dd&lt;dayD then		&apos;Add equals if you don&apos;t want to allow that specific date
    		checkSpecificDate = False
    	Else	
	      checkSpecificDate = True
	    End If   
	Else
	 checkSpecificDate = True
	End If
    
ElseIf yr &lt; specificDate(2) And mm &lt;= 12 Then
        checkSpecificDate = False
	Else
    	checkSpecificDate = True
End If
End If
End Function



Public function checkDuplicateTaxPyrPIN(ByVal value As String) As Boolean

Dim PINNo As String
Dim sheet as Object
sheet=ThisComponent.sheets.getByName(&quot;A_Basic_Info&quot;)
PINNo = sheet.getCellrangeByName(&quot;RetInf.PIN&quot;).String
If (TestPIN(value) And TestPINMain(PINNo)) Then
    If Ucase(value) = Ucase(PINNo) And value &lt;&gt; &quot;&quot; And PINNo &lt;&gt; &quot;&quot; Then
        checkDuplicateTaxPyrPIN = False
    Else
        checkDuplicateTaxPyrPIN = True
    End If
Else
    checkDuplicateTaxPyrPIN = False
End If

End Function

Public function checkDuplicateTaxPyrWifePIN(ByVal value As String) As Boolean

Dim PINNo As String
Dim sheet as Object
Dim declareWifeIncome as String
UnprotectSheet(&quot;A_Basic_Info&quot;)
sheet=ThisComponent.sheets.getByName(&quot;A_Basic_Info&quot;)
PINNo = sheet.getCellrangeByName(&quot;RetInf.SpousePIN&quot;).String
declareWifeIncome = ThisComponent.sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareWifeIncome&quot;).string
If declareWifeIncome&lt;&gt;&quot;No&quot; then
	If (TestPIN(value) And TestPINMain(PINNo)) Then
	    If Ucase(value) = Ucase(PINNo) And value &lt;&gt; &quot;&quot; And PINNo &lt;&gt; &quot;&quot; Then
	        checkDuplicateTaxPyrWifePIN = False
	    Else
	        checkDuplicateTaxPyrWifePIN = True
	    End If
	Else
	    checkDuplicateTaxPyrWifePIN = False
	End If
Else
	checkDuplicateTaxPyrWifePIN = True
End If
ProtectSheet(&quot;A_Basic_Info&quot;)
End Function

&apos;EXTRA FUNCTIONS
Public Function isTodaysDate(ByVal value As String) As Boolean

Dim sheetName As String
value = Format(CDate(Trim(value)), &quot;dd/MM/yyyy&quot;)
If Trim(value) &lt;&gt; &quot;&quot; And Trim(value) &lt;&gt; Format(Now(), &quot;dd/MM/yyyy&quot;) Then
    isTodaysDate = False
Else
    isTodaysDate = True
End If
End Function

sub generate_ods_file()

	ThisComponent.Store
	REM source document
	Dim sURL$, sLinkSheetName$
	   sURL = thisComponent.getURL()
	  	
	  	&apos;********************************************************
	  	&apos;Code added by janhavi on 28.02.2012 for Amendment
	  	if ThisComponent.getSheets().hasByName(&quot;Amendment&quot;) Then
			sLinkSheetName = thisComponent.Sheets.getByIndex(thisComponent.Sheets.count-2).getName()
		Else
			sLinkSheetName = thisComponent.Sheets.getByIndex(thisComponent.Sheets.count-1).getName()
		End If	
	  	&apos;********************************************************	  
	   
	   &apos;Msgbox sURL
	REM target document
	Dim doc, sheets, sName$, pos%
	   doc = StarDesktop.loadComponentFromURL(&quot;private:factory/scalc&quot;, &quot;_default&quot;,0, Array())
	   sheets = doc.getSheets()
	  &apos; sName = getUniqueName(sheets, &quot;Copied&quot;)
	   sName = getUniqueName(sheets, &quot;Sheet1&quot;)
	   pos = 0
	
	REM new sheet
	Dim sh
	   sheets.insertNewByName(sName, pos)
	   sh = sheets.getByName(sName)
	   
	REM link the new sheet
	   sh.link(sURL, sLinkSheetName, &quot;calc8&quot;, &quot;&quot;, com.sun.star.sheet.SheetLinkMode.VALUE)
	REM break link
	   sh.setLinkMode(com.sun.star.sheet.SheetLinkMode.NONE)
	
	REM
	   sheets.removeByName(&quot;Sheet2&quot;)
	   sheets.removeByName(&quot;Sheet3&quot;)
	REM 
	Dim cFile,cURL,oColumn,oCell,FilePicker,FPtype(0),FileN
	   oCell = Nothing
	   GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;) 
	   &apos;FileN=GetFileNameWithoutExtension(sURL,&quot;/&quot;)
	   FileN=GetFileNameWithoutExtension(sURL)
	   &apos;msgbox &quot;With Path : &quot;+FileN 
	   Dim pin as String
	   pin = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.PIN&quot;).string
	   &apos;FileN  = FileN  + &quot;_upload.ods&quot;
	   
 		FileN=GetFileNameWithoutExtension(sURL,&quot;/&quot;)	
	   
	&apos;======================= 
	&apos; Added By Sandeep Thaker 	
	&apos;==========================
		Dim currDate As String	  
	   Dim currTime As String
	   Dim TaxPayerPIN As String
	   
	   currDate=Day(Now) &amp; &quot;-&quot; &amp; Month(Now) &amp; &quot;-&quot; &amp; Year(Now) 
	   currTime=Hour(Now) &amp; &quot;-&quot; &amp; Minute(Now) &amp; &quot;-&quot; &amp; Second(Now)

	   TaxPayerPIN = 	   ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.PIN&quot;).string
	   
	   FileN  = currDate + &quot;_&quot; +currTime+ &quot;_&quot; + TaxPayerPIN  + &quot;_ITR.ods&quot; &apos;Modified by Sandeep Thaker
	
	&apos;======================= 
	&apos; End of Added By Sandeep Thaker 	
	&apos;==========================
	   
	   &apos;cFile = &quot;F:\MyCalc_upload&quot; &apos; Windows    
	   &apos;cURL = ConvertToURL( cFile + &quot;_upload.ods&quot; ) 
	   cURL = FileN

	 &apos;  FileN  = Format(Now(), &quot;dd-MM-yyyy&quot;)+&quot;_&quot;+Format(Now(),&quot;hh-mm-ss&quot;)+&quot;_&quot;+pin+&quot;_ITR.ods&quot;
	   
	   &apos;cFile = &quot;F:\MyCalc_upload&quot; &apos; Windows    
	   &apos;cURL = ConvertToURL( cFile + &quot;_upload.ods&quot; ) 
	  
	   sh = sheets.getByName(sName)
	   
	   For i=1 to 25
	    If i=10 Then
	    	i = i+1
	    End IF
	   	oColumn = sh.getColumns.getByIndex( i )
	   	oColumn.setPropertyValue(&quot;IsVisible&quot;, true)

	  Next
	   sh.CharColor = RGB(0,0,0)
	  oColumns = sh.getColumns() 
	   &apos; Get a specific column. 
   	  oColumn = oColumns.getByName( &quot;A&quot; ) 
	   &apos; Change width of column. 
       oColumn.Width = 0 &apos; 0 cm 

	   &apos;oCell = sh.getCellRangeByName(&quot;B1&quot;)
	   &apos;oCell.CharColor = RGB(0,0,0)
	  
	   &apos;oCell.setString(&quot;This sheet have hidden data please do not try to alter this file.&quot;)
 	   oCell = sh.getCellRangeByName(&quot;A3&quot;)
	   oCell.setString(&quot;ITR_RET&quot;)
   	   sh.Protect(Pwd)   
	   oCell = sh.getCellRangeByName(&quot;C1&quot;)
	   &apos;doc.storeAsURL( cURL, Array() ) 
	   &apos;doc.Protect(Pwd)
	   oDocFrame = doc.getCurrentController().getFrame()
	   oDispatchHelper = createUnoService( &quot;com.sun.star.frame.DispatchHelper&quot; ) 
	   &apos;oDispatchHelper.executeDispatch( oDocFrame, &quot;.uno:SaveAs&quot;, &quot;&quot;, 0, Array() )
	   doc.Protect(Pwd)
	   
	  cURL =  ConvertFromUrl(fSaveFile(FileN,doc)) &apos; Modified By Sandeep Thaker
	
	   doc.close(True) 
	   &apos;Added by vaishali gohil for Mac OS
	   Dim OSType as Integer
	   OSType = GetGUIType()
	   if OSType = 1 then
		   if cURL &lt;&gt; &quot;&quot; then
			   a5 = split(ConvertFromUrl(cURL),&quot;\&quot;)
			   Dim destFileName as String
			   destFileName = a5(Ubound(a5))
			   dim makeNewFolderPath as String
			   makeNewFolderPath = &quot;&quot;
			   for i = Lbound(a5) to UBound(a5) - 1
			   	if i = Lbound(a5) then
			   		makeNewFolderPath =  a5(i) 
			   	else
			   		makeNewFolderPath = makeNewFolderPath + &quot;\&quot; + a5(i)
			   	end if
			   next i
			   tod = NOW()
				tod = (Mid(tod, 1, 10))
				tod = join(split(tod, &quot;/&quot;), &quot;-&quot;)
			   makeNewFolderPath = makeNewFolderPath + &quot;\&quot; 
			   a4 = split(a5(Ubound(a5)),&quot;.&quot;)
			   zipPath = makeNewFolderPath + a4(0) + &quot;.zip&quot;
			   PutZipContent(ConvertToUrl(zipPath),destFileName,cURL, True)
			   Dim s As String 
			   s = ConvertFromUrl(cURL)
			   Kill s
			   MsgBox &quot;The zip file containing the sheet to be uploaded is saved at :&quot;+ ConvertFromUrl(zipPath) &apos;&quot;File Saved at: &quot;+ ConvertFromUrl(cURL) + &quot; and 
		   end if
	   else
	   		MsgBox (&quot;The ODS file has been saved at location &quot;&quot;&quot; + cURL + &quot;&quot;&quot;. Please note that this file needs to be zipped/compressed in order to upload on the iTax portal (https://itax.kra.go.ke). Please refer to the &apos;Read Me&apos; sheet for guidelines on how to compress .ods file.&quot;)
	   end if
	   &apos;Added by vaishali gohil for Mac OS end
end sub

Function getUniqueName(oContainer,sName$)
Dim i%,sNew$
   sNew = sName
   Do while oContainer.hasByName(sNew)
   	  oContainer.removeByName(sNew) 
      &apos;i = i +1
      &apos;sNew = sName &amp;&quot;_&quot;&amp; i      
   loop
   getUniqueName = sNew
End Function

  
  &apos;ENDED BY JANHAVI ON 23.11.2011
  
Public Sub fillUploadSheet()
	Dim sheetCount As Integer, i As Integer, rowCount As Integer
	Dim finalSheet As String, propValuePair As String
	&apos;Added By Arjun
	Dim referredCells as object
	Dim formulaLng as Long
	
	Dim PROP_SEP As String
	PROP_SEP = &quot;@P_@&quot;
	Dim CLASS_SEP As String
	CLASS_SEP = &quot;#C_@&quot;
	Dim VALUE_SEP As String
	VALUE_SEP = &quot;%V_@&quot;
	Dim MAIN_PROP_START As String
	MAIN_PROP_START = &quot;#&quot;
	Dim LIST_PROP_START As String
	LIST_PROP_START = &quot;@L_@&quot;
	
	Dim LIST_PROP_SEP As String
    LIST_PROP_SEP = &quot;@PL@&quot;
    Dim LIST_SEP As String
    LIST_SEP = &quot;@L_@&quot;
    Dim LIST_VALUE_SEP As String
    LIST_VALUE_SEP = &quot;%VL@&quot;
    
	
	
	Dim tempString As String, cellName As String
	Dim row As Long, column As Long, LastColumn As Long, LastRow As Long
	Dim currentWorkSheet As Object
	Dim cellRange As Object
	Dim nameCell As Object
	Dim str1 As String, str2 As String, str3 As String, str4 As String
	sheetCount = ThisComponent.Sheets.Count
	
	&apos;Arjun
	Dim cellCounter as Long
	Dim listNameAppendFlag as Boolean
	listNameAppendFlag = False
	cellCounter=0
	
	If (sheetCount &gt; 0) Then    
		
		&apos;*************************************************
		&apos;Code added for amendment by Janhavi on 28.02.2012

   		if ThisComponent.getSheets().hasByName(&quot;Amendment&quot;) Then
			sheet1 = ThisComponent.Sheets.getByIndex(sheetCount - 2)
		Else
			sheet1 = ThisComponent.Sheets.getByIndex(sheetCount - 1)
		End If			    
	    
		&apos;*************************************************
				
		
		ThisComponent.CurrentController.setActiveSheet(sheet1)
    	sheet1.Unprotect(Pwd)
    	finalSheet = sheet1.Name
     	sheet1.getCellByPosition(0,0).String = &quot;&quot;
     	For i = 0 To 255
			If sheet1.getCellByPosition(i,1).String&lt;&gt;&quot;&quot; then
			sheet1.getCellByPosition(i,1).String=&quot;&quot;
			End If
		Next
		allRangeNames = ThisComponent.NamedRanges.getElementNames() 
		Dim firstRowValue as String, secondRowValue As String, thirdRowValue As String
		firstRowValue = &quot;&quot;
	    secondRowValue = &quot;&quot;	    
	    thirdRowValue = &quot;&quot;    
		Dim validationSheet as object
		Dim multriEntryRowNum as Integer
    	validationSheet = ThisComponent.Sheets.getByName(&quot;Validations&quot;)
		For i = 1 To 65535
	    	If(validationSheet.getCellByPosition(0,i).getType() = EMPTYCELLTYPE) Then
	    		Exit For
	    	End If
	    	sectionName = validationSheet.getCellByPosition(0,i).String
	    	dim ccell as object
	    	ccell = validationSheet.getCellByPosition(3,i)
	    	If(validationSheet.getCellByPosition(3,i).String = &quot;&quot;) Then
		    	Goto Continue 
	    	End If
			rangeName  = validationSheet.getCellByPosition(2, i).String
			
	        Dim startRowNum as Long , endRowNum as Long, startColumnNum as Long , endcolumnNum as Long
	        oRange = ThisComponent.NamedRanges.getByName(rangeName)
	        startRowNum = oRange.getReferredCells().getRangeAddress().StartRow
	        endRowNum = oRange.getReferredCells().getRangeAddress().EndRow
	        startColumnNum = oRange.getReferredCells().getRangeAddress().StartColumn
	        endcolumnNum = oRange.getReferredCells().getRangeAddress().EndColumn
	        
	        If (startRowNum = endRowNum and startColumnNum = endColumnNum) then			&apos;Single cell parsing
	        	cell = oRange.getReferredCells().getCellByPosition(0,0)
	        	cellValue = cell.value
    			if(cellValue = 0) then 
    				cellValue = cell.String
    			End If
    			If Trim(firstRowValue) = &quot;&quot; Then
                    firstRowValue = firstRowValue &amp; rangeName &amp; VALUE_SEP &amp; cellValue
                Else
                    firstRowValue = firstRowValue &amp; PROP_SEP &amp; rangeName &amp; VALUE_SEP &amp; cellValue
                End If
            ElseIf (startRowNum &lt;&gt; endRowNum and startColumnNum = endColumnNum) then			&apos;Columnwise parsing
            	If Trim(secondRowValue) = &quot;&quot; Then
		            secondRowValue = rangeName
		        Else
		            secondRowValue = secondRowValue &amp; LIST_SEP &amp; rangeName
		        End If
		        
	    			doValidation = False
	    			For multriEntryRowNum = 0 to endRowNum - startRowNum			&apos;To skip blank row
	    				referredCells = oRange.getReferredCells()
	    				&apos;Added By Arjun
	    				logicalNameStartRow = oRange.getReferredCells().getRangeAddress().StartRow
	    				curCell = oRange.getReferredCells().getCellByPosition(0,multriEntryRowNum)
	    				If(curCell.getType() &lt;&gt; EMPTYCELLTYPE) Then
	    				formulaLng = 3
						mergedCellChk = ThisComponent.sheets.getByName(sectionName).getCellByPosition(0,multriEntryRowNum+logicalNameStartRow)
						&apos;and curCell.isMerged()=True
						if mergedCellChk.isMerged()=True then
							msgbox &quot;Row : &quot; &amp; multriEntryRowNum+logicalNameStartRow
						end if
		    				If(curCell.getType() = formulaLng and curCell.String = &quot;&quot; and curCell.value = 0 and mergedCellChk.isMerged()=True) Then
		    					msgbox multriEntryRowNum
		    				else
		    					doValidation = True
		    					Exit For
							End If	    				
	    				End If	    				
	    			Next multriEntryRowNum
	    			
	    			If (doValidation) Then
		    			Rem Do the validation for the row start from startmultyentryvalidationrow to endmultyentryvalidationrow
		    			For multriEntryRowNum = 0 to endRowNum - startRowNum
			    			curCell = oRange.getReferredCells().getCellByPosition(0,multriEntryRowNum)
			    			cellValue = curCell.value
			    			logicalNameStartRow = oRange.getReferredCells().getRangeAddress().StartRow
			    			mergedCellChk = ThisComponent.sheets.getByName(sectionName).getCellByPosition(0,multriEntryRowNum+logicalNameStartRow)
			    			&apos;if mergedCellChk.isMerged()=True then
			    			&apos;msgbox multriEntryRowNum+1+logicalNameStartRow+1
			    			&apos;end if
			    			If (mergedCellChk.isMerged()&lt;&gt;True) then
				    			if(cellValue = 0) then 
				    				cellValue = curCell.String
				    			End If
				    			If multriEntryRowNum = 0 Then
							    	secondRowValue = secondRowValue &amp; LIST_PROP_SEP
							    End If
								If multriEntryRowNum = endRowNum - startRowNum Then
									secondRowValue = secondRowValue &amp; cellValue
									&apos;Added new by Arjun for cell division
									sheet1.getCellByPosition(cellCounter,1).String=secondRowValue
									
									If Len(secondRowValue) &gt; 12000 And Len(secondRowValue) &lt; 16000 Then
										cellCounter=cellCounter+1
										secondRowValue=&quot;&quot;
										listNameAppendFlag = True
									End If
								Else
									secondRowValue = secondRowValue &amp; cellValue &amp; LIST_VALUE_SEP
								End If
							End If
			    		Next multriEntryRowNum
		    		End If
       		Else																				&apos;Multicell parsing

       			If Trim(secondRowValue) = &quot;&quot; Then
		            secondRowValue = rangeName
		        Else
		            secondRowValue = secondRowValue &amp; LIST_SEP &amp; rangeName
		        End If
		        &apos;Arjun
		        If startColumnNum&lt;&gt;0 then
					endColumnNum=endColumnNum-startColumnNum	
					startColumnNum=0
		    	End If
		        
       			For multriEntryRowNum = 0 to endRowNum - startRowNum					&apos;Rowwise then columnwise
	    			REM Check whether any column contains data 
	    			REM for current multi-entry row using multriEntryRowNum, startColNum and endColNum
	    			REM If any column contains data then run the validationrules according to the range
	    			
	    			&apos;Arjun
	    			If listNameAppendFlag = True Then
                        If Trim(secondRowValue) = &quot;&quot; Then
                            secondRowValue = rangeName
	                    Else
                            secondRowValue = secondRowValue &amp; LIST_SEP &amp; rangeName
                        End If
                        listNameAppendFlag = False
                    End If
	    			
	    			doValidation = False
	    			For multiEntryColNum = startColumnNum to endColumnNum 				&apos;To skip blank row
	    				referredCells = oRange.getReferredCells()
	    				curCell = oRange.getReferredCells().getCellByPosition(multiEntryColNum,multriEntryRowNum)
	    				If(curCell.getType() &lt;&gt; EMPTYCELLTYPE) Then
	    				formulaLng = 3
		    				If(curCell.getType() = formulaLng and curCell.String = &quot;&quot; and curCell.value = 0) Then
		    				
		    				else
		    					doValidation = True
		    					Exit For
							End If	    				
	    				End If	    				
	    			Next &apos;multiEntryColNum 
	
	    			If (doValidation) Then
		    			Rem Do the validation for the row start from startmultyentryvalidationrow to endmultyentryvalidationrow
		    			For multiEntryColNum = startColumnNum to endColumnNum 
				    		curCell = oRange.getReferredCells().getCellByPosition(multiEntryColNum,multriEntryRowNum)
			    			cellValue = curCell.value
			    			if(cellValue = 0) then 
			    				cellValue = curCell.String
			    			End If
			    			If multiEntryColNum = startColumnNum Then
						    	secondRowValue = secondRowValue &amp; LIST_PROP_SEP
						    End If
							If multiEntryColNum = endColumnNum Then
								secondRowValue = secondRowValue &amp; cellValue
								
								sheet1.getCellByPosition(cellCounter,1).String=secondRowValue
									
									If Len(secondRowValue) &gt; 12000 And Len(secondRowValue) &lt; 16000 Then
										cellCounter=cellCounter+1
										secondRowValue=&quot;&quot;
										listNameAppendFlag = True
									End If
							Else
								secondRowValue = secondRowValue &amp; cellValue &amp; LIST_VALUE_SEP
							End If
			    		Next &apos;multiEntryColNum
		    		End If        	
				Next multriEntryRowNum																&apos;Rowwise then columnwise end----------
			End If
			Continue:
		Next i
	End If
	sheet1.unprotect(Pwd)
	sheet1.getCellByPosition(0,0).String = firstRowValue
	&apos;sheet1.getCellByPosition(0,1).String = secondRowValue
	&apos;For generating hash codes.
	oDocScriptProvider = ThisComponent.getScriptProvider() 
	oScriptHash = oDocScriptProvider.getScript(&quot;vnd.sun.star.script:Encrypt.SHA.js?language=JavaScript&amp;location=document&quot;) 

	sheet1.getCellByPosition(0,3).String =  oScriptHash.invoke(Array(sheet1.getCellByPosition(0,0).String), Array(), Array()) 
	
	For i = 0 To 255
		If sheet1.getCellByPosition(i,1).String&lt;&gt;&quot;&quot; then
			sheet1.getCellByPosition(i,4).String=oScriptHash.invoke(Array(sheet1.getCellByPosition(i,1).String), Array(), Array()) 
		End If
	Next
	sheet1.protect(Pwd)
End Sub

Function DayDifference(ByVal currentDate As String,ByVal endDate As String) As Integer
Dim dd as Integer
Dim mm as Integer
Dim yy as Integer
Dim dd1 as Integer
Dim mm1 as Integer
Dim yy1 as Integer

Dim returnEndDate as Object
returnEndDate= Split(endDate, &quot;/&quot;)
 dd= INT(returnEndDate(0))
 mm= INT(returnEndDate(1))
 yy= INT(returnEndDate(2))
 
Dim currDate as Object
currDate= Split(currentDate, &quot;/&quot;)
 dd1= INT(currDate(0))
 mm1= INT(currDate(1))
 yy1= INT(currDate(2))

Dim final As Date
Dim initial As Date

final = DateSerial(yy, mm, dd)
initial = DateSerial(yy1, mm1, dd1)


if final-initial &gt;365 then
	DayDifference=365
ElseIf final-initial &lt;0 then
	DayDifference=0
Else
	DayDifference=final-initial
End If 

End Function

Function calc_SUBSTITUTE(vRange) As String

                     &apos; The first argument to callFunction() is the Calc Function Name
                     &apos; The 2nd argument is the parameters of that function as an array
   FuncAcc = createunoservice(&quot;com.sun.star.sheet.FunctionAccess&quot;)
	aArgs = array(vRange,&quot;,&quot;,&quot;&quot;)
   calc_SUBSTITUTE = FuncAcc.callFunction(&quot;SUBSTITUTE&quot;, aArgs)
   
End Function

&apos;Function fSaveFile() as String
&apos;   &apos;Set the Dialog Arguments to a Template for FILESAVE
&apos;   sFilePickerArgs = Array(com.sun.star.ui.dialogs.TemplateDescription.FILESAVE_AUTOEXTENSION )
&apos;
&apos;   &apos;register the Service for Filepicker   
&apos;   oFilePicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FilePicker&quot; )
&apos;
 &apos;  &apos;Pass some arguments to it
&apos;   With oFilePicker
&apos;      .Initialize( sFilePickerArgs() )
&apos;      .setDisplayDirectory( &quot;C:/&quot; )
&apos;      .appendFilter(&quot;CSV Files (.csv)&quot;, &quot;*.csv&quot; )
&apos;      .setTitle( &quot;Save As ...&quot; )
&apos;   End With

   &apos;If the savepath is selected return the complete path and display it in an messagebox   
&apos;   If oFilePicker.execute() Then
&apos;      sFiles = oFilePicker.getFiles()
&apos;      fSaveFile = sFiles(0)
&apos;   End If
   
   &apos; Close the Dialog
&apos;   oFilePicker.Dispose()
&apos;End Function


&apos;=========================================
&apos;Default Name in Dialog box for saving file
&apos;Added by Sandeep Thaker
&apos;==========================================
Function fSaveFile(fileName as String,doc as Object) as String
   &apos;Set the Dialog Arguments to a Template for FILESAVE
   sFilePickerArgs = Array(com.sun.star.ui.dialogs.TemplateDescription.FILESAVE_AUTOEXTENSION )

   &apos;register the Service for Filepicker   
   oFilePicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FilePicker&quot; )

   &apos;Pass some arguments to it
   With oFilePicker
      .Initialize( sFilePickerArgs() )
     
       .appendFilter(&quot;ODS Files (.ods)&quot;, &quot;*.ods&quot; )
      .setTitle( &quot;Save As ...&quot; )
   .setDefaultName(fileName)
   End With

   &apos;If the savepath is selected return the complete path and display it in an messagebox   
   If oFilePicker.execute() Then
      sFiles = oFilePicker.getFiles()
      fSaveFile = sFiles(0)
      doc.storeToURL( fSaveFile, Array() ) 
   End If
 
   &apos; Close the Dialog
   oFilePicker.Dispose()

End Function
&apos;==============================================
&apos;End of Added by Sandeep Thaker
&apos;==============================================


Public Function TestPINPartnership(lstr_check As String) As Boolean
	&apos;allowed characters A to Z, a to z And Blank
	Dim i As Integer
	Dim ia As Integer
	Dim ina As Integer
	Dim stlen As Integer
	Dim ascChr As Integer
	stlen = Len(lstr_check)
	ia = 0
	TestPINPartnership = True		
	If(stlen &lt;&gt; 11) Then 
		&apos;ina = 1
		TestPINPartnership = False
		If (stlen =0 ) Then 
			TestPINPartnership = True
		End If	
		Exit Function 
	
	Else
		For i = 1 To 11
			curChar = (Mid(lstr_check, i, 1))
			If i = 1  And (curChar &lt;&gt; &quot;P&quot; and curChar &lt;&gt; &quot;p&quot; and curChar &lt;&gt; &quot;A&quot; and curChar &lt;&gt; &quot;a&quot;) Then
				&apos;ina = 1
				TestPINPartnership = False
				Exit Function 	
			ElseIf i &gt; 1 and i &lt; 11 Then
		    	Select Case curChar
		        	Case &quot;0&quot; To &quot;9&quot;          &apos;A to Z
		            	ia = ia + 1		           
			        Case Else
			            &apos;ina = 1
			            TestPINPartnership = False
			            Exit Function 	
			    End Select
			ElseIf i = 11 Then
				Select Case curChar
		        	Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
		            	ia = ia + 1
		            Case &quot;a&quot; To &quot;z&quot;          &apos;A to Z
		            	ia = ia + 1	
		        	Case Else
				    	TestPINPartnership = False
			            Exit Function 	
				End Select	
			End If   
		Next i
	End If
End Function

&apos;*************NOT USED/EXRTA FUNCTIONS*********************************************
Public Sub Generate_upload()
	On Error GoTo Errorhandle
	
	Dim sURL$, sLinkSheetName$
	sURL = thisComponent.getURL()
	GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;) 
	FileN=GetFileNameWithoutExtension(sURL)
	FileN = fSaveFile() &apos;&quot;file:///D:/KRA Work/Excel/VAT Returns_up.csv&quot;
	&apos;	cURL = FileN
	
	&apos;	doc.storeAsURL( cURL, Array() )
	&apos;	MsgBox &quot;File Saved at: &quot;+ ConvertFromUrl(cURL)
	Dim oSFA As Object, oOutStream as Object, oOutText as Object
   	Dim sFilePath as String 
   	oSFA = createUNOService (&quot;com.sun.star.ucb.SimpleFileAccess&quot;) 
    sFilePath = FileN &apos;&quot;C:\basefile.txt&quot;
    If oSFA.exists(sFilePath) Then
      oSFA.kill(sFilePath) &apos;if file exists, delete it
    End If
   	sheetCount = ThisComponent.Sheets.Count

	If (sheetCount &gt; 0) Then    
		sheet1 = ThisComponent.Sheets.getByIndex(sheetCount - 1)
		firstRowValue = sheet1.getCellByPosition(0,0).String
		secondRowValue = sheet1.getCellByPosition(0,1).String
	End If

   oOutStream = oSFA.openFileWrite(sFilePath) 
   oOutText = createUNOService (&quot;com.sun.star.io.TextOutputStream&quot;) 
   oOutText.setOutputStream(oOutStream) 

   oOutText.WriteString(firstRowValue)
   oOutText.WriteString(chr(13))
   oOutText.WriteString(secondRowValue)
   oOutText.WriteString(chr(13))
   oOutText.WriteString(DigestStrToHexStr(firstRowValue + secondRowValue))
   oOutText.closeOutput()
   MsgBox (&quot;No Error Found,Upload file is saved : &quot;&quot;&quot; + ConvertFromUrl(sFilePath) + &quot;&quot;&quot;.&quot;)

Exit Sub
  
Errorhandle:
    MsgBox (&quot;Modifications Are Not Saved,Upload File Not Generated&quot;) &apos;&amp; Err.Description)
    Exit Sub
    Resume
End Sub

Public Function validateExpoFormat(lstr_check As String) As Boolean
	&apos;allowed characters 0 to 9 and .
	Dim i As Integer
	Dim ia As Integer
	Dim ina As Integer
	Dim stlen As Integer
	Dim dotCount As Integer
	Dim expCount as Integer
	Dim plusCount as Integer
	
	stlen = Len(lstr_check)
	ia = 0
	ina = 0
	validateExpoFormat = True
	For i = 1 To stlen
		Select Case (Mid(lstr_check, i, 1))
	    	Case &quot;-&quot;
	        	ia = ia + 1
	       	Case &quot;,&quot;
	        	ia = ia + 1	       	
	       	Case &quot;.&quot;
	        	ia = ia + 1
	        	dotCount = dotCount + 1
	        Case &quot;E&quot;
	        	ia = ia + 1
	        	expCount = expCount + 1
	        Case &quot;+&quot;
	        	ia = ia + 1
	        	plusCount = plusCount + 1
	        Case &quot;0&quot; To &quot;9&quot;          &apos;0 to 9
	        	ia = ia + 1
	        Case Else
	            ina = ina + 1
	            validateExpoFormat = False
	            Exit Function
	    End Select
	Next i
	If dotCount &gt; 1 or expCount&gt;1 or plusCount&gt;1 Then
		validateExpoFormat = False
	End If
End Function

Public Function CompareTotals(totalRangeName As String,cellValue As Double) As Boolean
&apos;unprotect all sheets
for i=0 to ThisComponent.Sheets.Count - 1
	ActiveSheet = ThisComponent.sheets.getByIndex(i)
	ActiveSheet.unprotect(Pwd)
next i

Dim sheetCompareName as String
Dim CompareRangeName as String
Dim doCheckSelf as String
Dim doCheckWife as String
Dim currCase as String

doCheckSelf = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareSelfBusIncome&quot;).string
doCheckWife = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareWifeBusIncome&quot;).string

&apos;get rangeNames
if(totalRangeName=&quot;RentalIncome.ListSTO&quot;)then
	sheetCompareName=&quot;B_Profit_Loss_Account_Self&quot;
	CompareRangeName=&quot;RentalTotalSelf&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;RentalIncome.ListWTO&quot;)then
	sheetCompareName=&quot;B_Profit_Loss_Account_Wife&quot;
	CompareRangeName=&quot;RentalTotalWife&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;&quot;)then
	sheetCompareName=&quot;&quot;
	CompareRangeName=&quot;&quot;
	currCase=&quot;&quot;
End If

Dim value1 as Double
Dim value2 as Double
value1 =    cellValue
value2 =    ThisComponent.Sheets.getByName(sheetCompareName).getCellrangeByName(CompareRangeName).value

If (currCase=&quot;Self&quot; and doCheckSelf=&quot;Yes&quot;) or (currCase=&quot;Wife&quot; and doCheckWife=&quot;Yes&quot;) then
	If Cdbl(format(value1,&quot;#,##0.00&quot;))&lt;&gt;Cdbl(format(value2,&quot;#,##0.00&quot;)) then
		CompareTotals=False
	Else
		CompareTotals=True
	End If
Else
		CompareTotals=True
End If
&apos;protect all sheets
for i=0 to ThisComponent.Sheets.Count - 1
	ActiveSheet = ThisComponent.sheets.getByIndex(i)		
	ActiveSheet.protect (Pwd)
next i

errorSheet = ThisComponent.Sheets.getByName(&quot;Errors&quot;)
	errorSheet.Unprotect (Pwd)

validationSheet = ThisComponent.Sheets.getByName(&quot;Validations&quot;)
    validationSheet.UnProtect (Pwd)

End Function

Public Function lessCompareTotals(totalRangeName As String,cellValue As Double) As Boolean
&apos;unprotect all sheets
for i=0 to ThisComponent.Sheets.Count - 1
	ActiveSheet = ThisComponent.sheets.getByIndex(i)
	ActiveSheet.unprotect(Pwd)
next i

Dim sheetCompareName as String
Dim CompareRangeName as String
Dim doCheckSelf as String
Dim doCheckWife as String
Dim currCase as String

doCheckSelf = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareSelfBusIncome&quot;).string
doCheckWife = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareWifeBusIncome&quot;).string

&apos;get rangeNames
if(totalRangeName=&quot;DtlLossFrwd.BussLossAdjustS&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.BussEarlierLossS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;DtlLossFrwd.FarmLossAdjustS&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.FarmEarlierLossS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;DtlLossFrwd.RentLossAdjustS&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.RentEarlierLossS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;DtlLossFrwd.InterestLossAdjustS&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.IntrEarlierLossS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;DtlLossFrwd.CommLossAdjustS&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.CommEarlierLossS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;DtlLossFrwd.OtherLossAdjustS&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.OthrEarlierLossS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;DtlLossFrwd.BussLossAdjustW&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.BussEarlierLossW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;DtlLossFrwd.FarmLossAdjustW&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.FarmEarlierLossW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;DtlLossFrwd.RentLossAdjustW&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.RentEarlierLossW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;DtlLossFrwd.InterestLossAdjustW&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.IntrEarlierLossW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;DtlLossFrwd.CommLossAdjustW&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.CommEarlierLossW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;DtlLossFrwd.OtherLossAdjustW&quot;)then
	sheetCompareName=&quot;S_Previous_Years_Losses&quot;
	CompareRangeName=&quot;DtlLossFrwd.OtherEarlierLossW&quot;	
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;&quot;)then
	sheetCompareName=&quot;&quot;
	CompareRangeName=&quot;&quot;
	currCase=&quot;&quot;
End If

Dim value1 as Double
Dim value2 as Double
value1 =    cellValue
value2 =    ThisComponent.Sheets.getByName(sheetCompareName).getCellrangeByName(CompareRangeName).value

If (currCase=&quot;Self&quot; and doCheckSelf=&quot;Yes&quot;) or (currCase=&quot;Wife&quot; and doCheckWife=&quot;Yes&quot;) then
	If Cdbl(format(value1,&quot;#,##0.00&quot;))&gt;Cdbl(format(value2,&quot;#,##0.00&quot;)) then
		lessCompareTotals=False
	Else
		lessCompareTotals=True
	End If
Else
		lessCompareTotals=True
End If
&apos;protect all sheets
for i=0 to ThisComponent.Sheets.Count - 1
	ActiveSheet = ThisComponent.sheets.getByIndex(i)		
	ActiveSheet.protect (Pwd)
next i

errorSheet = ThisComponent.Sheets.getByName(&quot;Errors&quot;)
	errorSheet.Unprotect (Pwd)

validationSheet = ThisComponent.Sheets.getByName(&quot;Validations&quot;)
    validationSheet.UnProtect (Pwd)

End Function

Public Function greaterCompareTotals(totalRangeName As String,cellValue As Double) As Boolean
&apos;unprotect all sheets
for i=0 to ThisComponent.Sheets.Count - 1
	ActiveSheet = ThisComponent.sheets.getByIndex(i)
	ActiveSheet.unprotect(Pwd)
next i

Dim sheetCompareName as String
Dim CompareRangeName as String
Dim doCheckSelf as String
Dim doCheckWife as String
Dim currCase as String

doCheckSelf = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareSelfBusIncome&quot;).string
doCheckWife = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareWifeBusIncome&quot;).string

&apos;get rangeNames
if(totalRangeName=&quot;TC.BussTaxableIncomeS&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Self&quot;
	CompareRangeName=&quot;TaxComp.BUSSLossCurrentYrIncomeS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;TC.FarmTaxableIncomeS&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Self&quot;
	CompareRangeName=&quot;TaxComp.FARMLossCurrentYrIncomeS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;TC.RentTaxableIncomeS&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Self&quot;
	CompareRangeName=&quot;TaxComp.RENTLossCurrentYrIncomeS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;TC.IntrTaxableIncomeS&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Self&quot;
	CompareRangeName=&quot;TaxComp.INTRLossCurrentYrIncomeS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;TC.CommTaxableIncomeS&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Self&quot;
	CompareRangeName=&quot;TaxComp.COMMLossCurrentYrIncomeS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;TC.OtherTaxableIncomeS&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Self&quot;
	CompareRangeName=&quot;TaxComp.OTHRLossCurrentYrIncomeS&quot;
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;TC.TotalTaxableIncomeConsdtS&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Self&quot;
	CompareRangeName=&quot;TC.TotalLossCurrntYrIncomeConsdtS&quot;	
	currCase=&quot;Self&quot;
elseif(totalRangeName=&quot;TC.BussTaxableIncomeW&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Wife&quot;
	CompareRangeName=&quot;TaxComp.BUSSLossCurrentYrIncomeW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;TC.FarmTaxableIncomeW&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Wife&quot;
	CompareRangeName=&quot;TaxComp.FARMLossCurrentYrIncomeW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;TC.RentTaxableIncomeW&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Wife&quot;
	CompareRangeName=&quot;TaxComp.RENTLossCurrentYrIncomeW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;TC.IntrTaxableIncomeW&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Wife&quot;
	CompareRangeName=&quot;TaxComp.INTRLossCurrentYrIncomeW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;TC.CommTaxableIncomeW&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Wife&quot;
	CompareRangeName=&quot;TaxComp.COMMLossCurrentYrIncomeW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;TC.OtherTaxableIncomeW&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Wife&quot;
	CompareRangeName=&quot;TaxComp.OTHRLossCurrentYrIncomeW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;TC.TotalTaxableIncomeConsdtW&quot;)then
	sheetCompareName=&quot;T_Income_Computation_Wife&quot;
	CompareRangeName=&quot;TC.TotalLossCurrntYrIncomeConsdtW&quot;
	currCase=&quot;Wife&quot;
elseif(totalRangeName=&quot;&quot;)then
	sheetCompareName=&quot;&quot;
	CompareRangeName=&quot;&quot;
	currCase=&quot;&quot;
End If

Dim value1 as Double
Dim value2 as Double
value1 =    cellValue
value2 =    ThisComponent.Sheets.getByName(sheetCompareName).getCellrangeByName(CompareRangeName).value

If (currCase=&quot;Self&quot; and doCheckSelf=&quot;Yes&quot;) or (currCase=&quot;Wife&quot; and doCheckWife=&quot;Yes&quot;) then
If Cdbl(format(value2,&quot;#,##0.00&quot;))&gt;0 then
	If Cdbl(format(value1,&quot;#,##0.00&quot;))&lt;Cdbl(format(value2,&quot;#,##0.00&quot;)) then
		greaterCompareTotals=False
	Else
		greaterCompareTotals=True
	End If
Else
	greaterCompareTotals=True
End If
Else
		greaterCompareTotals=True
End If
&apos;protect all sheets
for i=0 to ThisComponent.Sheets.Count - 1
	ActiveSheet = ThisComponent.sheets.getByIndex(i)		
	ActiveSheet.protect (Pwd)
next i

errorSheet = ThisComponent.Sheets.getByName(&quot;Errors&quot;)
	errorSheet.Unprotect (Pwd)

validationSheet = ThisComponent.Sheets.getByName(&quot;Validations&quot;)
    validationSheet.UnProtect (Pwd)

End Function

Function PutZipContent( sZipURL As String, sContentName As String, sInputURL As String, Optional bCompress As Boolean )
  Dim oZipPkg As Object, oSFA As Object
  Dim oContentStream As Object, oZipFolder As Object
  oZipPkg = CreateUnoService(&quot;com.sun.star.packages.Package&quot;)
  oZipPkg.initialize(array(sZipURL))
  oZipFolder = oZipPkg.getByHierarchicalName(&quot;/&quot;)
  oContentStream = oZipPkg.createInstanceWithArguments(array(false))
  oSFA = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
  If oSFA.exists(sInputURL) Then
    oContentStream.setInputStream(oSFA.openFileRead(sInputURL))
    
    If IsMissing(bCompress) Then bCompress = True
    oContentStream.setPropertyValue(&quot;Compressed&quot;, bCompress)
    If NOT oZipFolder.hasByName(sContentName) Then
      oZipFolder.insertByName(sContentName,oContentStream)
    Else
      oZipFolder.replaceByName(sContentName,oContentStream)
    End If
    oZipPkg.commitChanges()
  End If
End Function

Public function checkDuplicateIncomeType(ByVal rangeName As String,oCells as Object) As Boolean

Dim startRowNum as Long , endRowNum as Long, startColumnNum as Long , endcolumnNum as Long
Dim testTypOfInc As String
Dim TypeOfIncome As String
Dim testRatioForInc as long
Dim sheet as Object
Dim row As Long
Dim totRatio as Double
sheet=ThisComponent.sheets.getByName(&quot;G_Partnership_Income&quot;)

		oRange = ThisComponent.NamedRanges.getByName(rangeName)
      
        startRowNum = oRange.getReferredCells().getRangeAddress().StartRow
        endRowNum = oRange.getReferredCells().getRangeAddress().EndRow
        startColumnNum = oRange.getReferredCells().getRangeAddress().StartColumn
        endcolumnNum = oRange.getReferredCells().getRangeAddress().EndColumn

TypeOfIncome=oCells.string
row = oCells.getCellAddress().row
				for i=startRowNum to endRowNum
				 testTypOfInc=sheet.getCellByPosition(2,i).string
				 testRatioForInc=sheet.getCellByPosition(3,i).value
		        
				         If testTypOfInc&lt;&gt;&quot;&quot; then
				            If UCase(testTypOfInc) = Ucase(TypeOfIncome) then
				            	totRatio=totRatio+testRatioForInc
				            End If
					     End If    
			    Next
if totRatio&lt;&gt;100 then
	checkDuplicateIncomeType=false
Else
	checkDuplicateIncomeType=true
End If			    

End Function

Public function checkPinIncomeTypeRatio(ByVal rangeName As String) As Boolean

Dim startRowNum as Long , endRowNum as Long, startColumnNum as Long , endcolumnNum as Long
Dim testTypOfInc As String
Dim TypeOfIncome As String
Dim testRatioForInc as Double
Dim pinOfPartner as String
Dim sheet as Object
Dim row As Long
Dim totRatio as Double

checkPinIncomeTypeRatio  = True

sheet=ThisComponent.sheets.getByName(&quot;G_Partnership_Income&quot;)

		oRange = ThisComponent.NamedRanges.getByName(rangeName)
      
        startRowNum = oRange.getReferredCells().getRangeAddress().StartRow
        endRowNum = oRange.getReferredCells().getRangeAddress().EndRow
        startColumnNum = oRange.getReferredCells().getRangeAddress().StartColumn
        endcolumnNum = oRange.getReferredCells().getRangeAddress().EndColumn

				for i=startRowNum to endRowNum
				 pinOfPartnerI=sheet.getCellByPosition(0,i).string
				 testTypOfIncI=sheet.getCellByPosition(2,i).string
				 testRatioForIncI=sheet.getCellByPosition(3,i).value
		        	for j=startRowNum to endRowNum
		        		pinOfPartnerJ=sheet.getCellByPosition(0,j).string
						testTypOfIncJ=sheet.getCellByPosition(2,j).string
						testRatioForIncJ=sheet.getCellByPosition(3,j).value
						if i=j then
						else
							if pinOfPartnerI = pinOfPartnerJ and pinOfPartnerI&lt;&gt;&quot;&quot; then
								if testTypOfIncI = testTypOfIncJ or testRatioForIncI&lt;&gt;testRatioForIncJ then
									checkPinIncomeTypeRatio  =false
									Exit For
								end if
							end if
						end if 
		        	Next
			    Next

End Function


Public Function validateDateOfComm(ByVal value As String) As Boolean
	
	Dim startDate as String
	Dim endDate as String
	Dim year as String
		Dim month as String
		Dim day as String
		Dim endDt as Object
		
	startDate =    ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string
	endDate = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string
	
	If (endDate = &quot;&quot;) Or ValidateDate(endDate)=False Then
   	     validateDateOfComm=True
	Else			
						endDt= Split(endDate,&quot;/&quot;)
	              		year=INT(endDt(2))
	              		month=INT(endDt(1))
	              		day=INT(endDt(0))
			            If lessThnEqualToReturnYr(value,year,month,day)=False Then
				        		   validateDateOfComm=False
				        Else
				        	validateDateOfComm=True
			        	End If
	End If		
			
End Function

Public Function validateMatDate(ByVal value As String) As Boolean
	
	Dim startDate as String
	Dim endDate as String
	Dim year as String
		Dim month as String
		Dim day as String
		Dim endDt as Object
		
	startDate =    ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string
	endDate = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string
	
	If (startDate = &quot;&quot;) OR ValidateDate(startDate)=False Then
			       	     validateMatDate=True
		            Else			
			            If checkGrtrThnDate(value,startDate) Then
				        		   validateMatDate=False
				        Else
				        		   validateMatDate=True
					    End If
	End If		
			
End Function

Public Function TestAlphabetSpaceDotSpl(lstr_check As String) As Boolean
&apos;allowed characters A to Z, a to z And Blank
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case &quot;A&quot; To &quot;Z&quot;          &apos;A to Z
            ia = ia + 1
        Case &quot;a&quot; To &quot;z&quot;          &apos;a to z
            ia = ia + 1
        Case &quot; &quot;, &quot;.&quot;&apos;, &quot;.&quot;, &quot;-&quot;, &quot;/&quot;,&quot;:&quot; &apos;&quot;;&quot;, &quot;-&quot;, &quot;#&quot;, &quot;+&quot;, &quot;*&quot;, &quot;/&quot;, &quot;=&quot;, &quot;@&quot;, &quot;$&quot;, &quot;&amp;&quot;, &quot;%&quot; , &quot;(&quot;, &quot;)&quot; ,&quot;&gt;&quot;, &quot;&lt;&quot;   &apos; Blank
            ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphabetSpaceDotSpl = True
Else
    TestAlphabetSpaceDotSpl = False
End If

End Function

Public Function checkGrtrThnNotEqlDate(ByVal dateFrom As String,ByVal dateTo as String) As Boolean
Dim mm As Integer
Dim yr As Integer
Dim dd as Integer
Dim strDate As Object
Dim currDate as Object
&apos;mm = Format(CDate(Trim(value)), &quot;MM&quot;)
&apos;yr = Format(CDate(Trim(value)), &quot;yyyy&quot;)
&apos;dd = Format(CDate(Trim(value)), &quot;dd&quot;)
If(Len(Trim(dateFrom))=0) then
	checkGrtrThnNotEqlDate=True
	Exit function
End If
If(Len(Trim(dateTo))=0) then
	checkGrtrThnNotEqlDate=True
	Exit function
End If
if ValidateDate(dateFrom) then
 strDate= Split(dateFrom, &quot;/&quot;)
 dd= INT(strDate(0))
 mm= INT(strDate(1))
 yr= INT(strDate(2))

currDate= Split(dateTo,&quot;/&quot;)
&apos;If yr = Format(Now(), &quot;yyyy&quot;) Then
If yr= INT(currDate(2)) then
	Dim mon as Integer
	Dim dayD as Integer 
	mon= INT(currDate(1))
	dayD = INT(currDate(0))
    If mm &lt; mon Then
      checkGrtrThnNotEqlDate = True
    ElseIf mm=mon then
    	If dd&lt;dayD then
    		checkGrtrThnNotEqlDate = True
    	Else	
	      checkGrtrThnNotEqlDate = False
	    End If   
	Else
	 checkGrtrThnNotEqlDate = False
	End If
    
ElseIf yr &lt; currDate(2) And mm &lt;= 12 Then
        checkGrtrThnNotEqlDate = True
	Else
    	checkGrtrThnNotEqlDate = False
End If
End If
End Function

Public Function checkDateOfDepositSelfAssess(ByVal value As String) As Boolean
Dim startDate as String
Dim endDate as String

checkDateOfDepositSelfAssess = True

unprotectsheet(&quot;A_Basic_Info&quot;)
&apos;-&gt;Arjun
if(ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string&lt;&gt;&quot;&quot; and ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string&lt;&gt;&quot;&quot;)then
	startDate =    ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string
	endDate = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string
	If value&lt;&gt;&quot;&quot; then
	          If  ValidateDate(value) then
		           If  checkFutureDate(value) = False Then
		   	   		    	checkDateOfDepositSelfAssess = False
		   		   ElseIf  checkGrtrThnNotEqlDate(endDate,value)=False then
		   		   			checkDateOfDepositSelfAssess = False
		  	       End If
			  Else
			  		checkDateOfDepositSelfAssess = False
			  End If	 
	         End If
Else
	checkDateOfDepositSelfAssess = True
End If
protectsheet(&quot;A_Basic_Info&quot;)
End Function

Sub prnEntriesBothSch() as Boolean
	Dim taxDue as Double
	Dim prnAdvPmt as Double
	Dim prnTotal as Double
	Dim rn_no_12 as Double
	Dim rn_no_131 as Double
	Dim rn_no_132 as Double
	Dim rn_no_133 as Double
	Dim rn_no_134 as Double
	Dim rn_no_135 as Double
	Dim rn_no_137 as Double
	
	prnEntriesBothSch=True
	
	rn_no_12=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.TotTaxableIncomeLessRlfS&quot;).value
	rn_no_131=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.PayeDedListSTO&quot;).value
	rn_no_132=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.InstallmentTaxListSTO&quot;).value
	rn_no_133=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.WithHoldingListSTO&quot;).value
	rn_no_134=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.VehicleAdvTaxPaidListSTO&quot;).value
	rn_no_135=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomePaidAdvanceListSTO&quot;).value
	rn_no_137=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomeDTACreditsS&quot;).value
	taxDue=rn_no_12-rn_no_131-rn_no_132-rn_no_133-rn_no_134-rn_no_135-rn_no_137
	prnAdvPmt=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvanceListSTO&quot;).value
	prnTotal=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvncSelfAssmntListSTO&quot;).value
	prnSelfAssess=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidSelfAssmntListSTO&quot;).value
	
	If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&lt;=0 and (Cdbl(format(prnTotal,&quot;#,##0.00&quot;)))&gt;0 then
		prnEntriesBothSch=False
	End If
End Sub

Sub prnEntriesSelfAssess() as Boolean
	Dim taxDue as Double
	Dim prnAdvPmt as Double
	Dim prnTotal as Double
	Dim prnSelfAssess as Double
	Dim rn_no_12 as Double
	Dim rn_no_131 as Double
	Dim rn_no_132 as Double
	Dim rn_no_133 as Double
	Dim rn_no_134 as Double
	Dim rn_no_135 as Double
	Dim rn_no_137 as double
	prnEntriesSelfAssess=True
	
	rn_no_12=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.TotTaxableIncomeLessRlfS&quot;).value
	rn_no_131=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.PayeDedListSTO&quot;).value
	rn_no_132=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.InstallmentTaxListSTO&quot;).value
	rn_no_133=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.WithHoldingListSTO&quot;).value
	rn_no_134=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.VehicleAdvTaxPaidListSTO&quot;).value
	rn_no_135=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomePaidAdvanceListSTO&quot;).value
	rn_no_137=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomeDTACreditsS&quot;).value
	taxDue=rn_no_12-rn_no_131-rn_no_132-rn_no_133-rn_no_134-rn_no_135-rn_no_137
	prnAdvPmt=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvanceListSTO&quot;).value
	prnTotal=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvncSelfAssmntListSTO&quot;).value
	prnSelfAssess=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidSelfAssmntListSTO&quot;).value
	
	If (Cdbl(format(prnSelfAssess,&quot;#,##0.00&quot;)))&gt;0 and (Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;)))&gt;0 then
		If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&lt;=(Cdbl(format(prnSelfAssess,&quot;#,##0.00&quot;))) and (Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;)))&gt;0 then
			prnEntriesSelfAssess=False
		ElseIf (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&lt;(Cdbl(format(prnSelfAssess,&quot;#,##0.00&quot;)))+(Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;))) and (Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;)))&gt;0 then
			prnEntriesSelfAssess=False
		End If
	End If
End Sub
							
Sub advPaymentGreaterThanLiability() as Boolean
	Dim taxDue as Double
	Dim prnAdvPmt as Double
	Dim prnTotal as Double
	Dim prnSelfAssess as Double
	Dim rn_no_12 as Double
	Dim rn_no_131 as Double
	Dim rn_no_132 as Double
	Dim rn_no_133 as Double
	Dim rn_no_134 as Double
	Dim rn_no_135 as Double
	Dim rn_no_137 as double
	advPaymentGreaterThanLiability=True
	
	rn_no_12=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.TotTaxableIncomeLessRlfS&quot;).value
	rn_no_131=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.PayeDedListSTO&quot;).value
	rn_no_132=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.InstallmentTaxListSTO&quot;).value
	rn_no_133=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.WithHoldingListSTO&quot;).value
	rn_no_134=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.VehicleAdvTaxPaidListSTO&quot;).value
	rn_no_135=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomePaidAdvanceListSTO&quot;).value
	rn_no_137=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomeDTACreditsS&quot;).value
	taxDue=rn_no_12-rn_no_131-rn_no_132-rn_no_133-rn_no_134-rn_no_135-rn_no_137
	prnAdvPmt=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvanceListSTO&quot;).value
	prnTotal=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvncSelfAssmntListSTO&quot;).value
	prnSelfAssess=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidSelfAssmntListSTO&quot;).value
	
	If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&gt;0 then
		If (Cdbl(format(prnSelfAssess,&quot;#,##0.00&quot;)))&lt;=0 then
			If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&lt;(Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;))) then
				advPaymentGreaterThanLiability=False
			End If
		End If
	End If
End Sub

Sub selfPaymentGreaterThanLiability() as Boolean
	Dim taxDue as Double
	Dim prnAdvPmt as Double
	Dim prnTotal as Double
	Dim prnSelfAssess as Double
	Dim rn_no_12 as Double
	Dim rn_no_131 as Double
	Dim rn_no_132 as Double
	Dim rn_no_133 as Double
	Dim rn_no_134 as Double
	Dim rn_no_135 as Double
	dim rn_no_137 as double
	selfPaymentGreaterThanLiability=True
	
	rn_no_12=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.TotTaxableIncomeLessRlfS&quot;).value
	rn_no_131=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.PayeDedListSTO&quot;).value
	rn_no_132=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.InstallmentTaxListSTO&quot;).value
	rn_no_133=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.WithHoldingListSTO&quot;).value
	rn_no_134=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.VehicleAdvTaxPaidListSTO&quot;).value
	rn_no_135=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomePaidAdvanceListSTO&quot;).value
	rn_no_137=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomeDTACreditsS&quot;).value
	taxDue=rn_no_12-rn_no_131-rn_no_132-rn_no_133-rn_no_134-rn_no_135-rn_no_137
	prnAdvPmt=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvanceListSTO&quot;).value
	prnTotal=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvncSelfAssmntListSTO&quot;).value
	prnSelfAssess=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidSelfAssmntListSTO&quot;).value
	
	If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&gt;0 then
		If (Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;)))&lt;=0 then
			If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&lt;(Cdbl(format(prnSelfAssess,&quot;#,##0.00&quot;))) then
				selfPaymentGreaterThanLiability=False
			End If
		End If
	End If
End Sub

&apos;For Wife
Sub prnEntriesBothSchWife() as Boolean
	Dim taxDue as Double
	Dim prnAdvPmt as Double
	Dim prnTotal as Double
	Dim rn_no_12 as Double
	Dim rn_no_131 as Double
	Dim rn_no_132 as Double
	Dim rn_no_133 as Double
	Dim rn_no_134 as Double
	Dim rn_no_135 as Double
	Dim rn_no_137
	prnEntriesBothSchWife=True
	
	rn_no_12=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.TotTaxableIncomeLessRlfW&quot;).value
	rn_no_131=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.PayeDedListWTO&quot;).value
	rn_no_132=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.InstallmentTaxListWTO&quot;).value
	rn_no_133=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.WithHoldingListWTO&quot;).value
	rn_no_134=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.VehicleAdvTaxPaidListWTO&quot;).value
	rn_no_135=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomePaidAdvanceListWTO&quot;).value
	rn_no_137=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomeDTACreditsS&quot;).value
	taxDue=rn_no_12-rn_no_131-rn_no_132-rn_no_133-rn_no_134-rn_no_135-rn_no_137
	prnAdvPmt=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvanceListWTO&quot;).value
	prnTotal=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvncSelfAssmntListWTO&quot;).value
	prnSelfAssess=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidSelfAssmntListWTO&quot;).value
	
	If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&lt;=0 and (Cdbl(format(prnTotal,&quot;#,##0.00&quot;)))&gt;0 then
		prnEntriesBothSchWife=False
	End If
End Sub

Sub prnEntriesSelfAssessWife() as Boolean
	Dim taxDue as Double
	Dim prnAdvPmt as Double
	Dim prnTotal as Double
	Dim prnSelfAssess as Double
	Dim rn_no_12 as Double
	Dim rn_no_131 as Double
	Dim rn_no_132 as Double
	Dim rn_no_133 as Double
	Dim rn_no_134 as Double
	Dim rn_no_135 as Double
	Dim rn_no_137 as double
	prnEntriesSelfAssessWife=True
	
	rn_no_12=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.TotTaxableIncomeLessRlfW&quot;).value
	rn_no_131=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.PayeDedListWTO&quot;).value
	rn_no_132=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.InstallmentTaxListWTO&quot;).value
	rn_no_133=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.WithHoldingListWTO&quot;).value
	rn_no_134=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.VehicleAdvTaxPaidListWTO&quot;).value
	rn_no_135=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomePaidAdvanceListWTO&quot;).value
	rn_no_137=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomeDTACreditsS&quot;).value
	taxDue=rn_no_12-rn_no_131-rn_no_132-rn_no_133-rn_no_134-rn_no_135-rn_no_137
	prnAdvPmt=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvanceListWTO&quot;).value
	prnTotal=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvncSelfAssmntListWTO&quot;).value
	prnSelfAssess=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidSelfAssmntListWTO&quot;).value
	
	If (Cdbl(format(prnSelfAssess,&quot;#,##0.00&quot;)))&gt;0 and (Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;)))&gt;0 then
		If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&lt;=(Cdbl(format(prnSelfAssess,&quot;#,##0.00&quot;))) and (Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;)))&gt;0 then
			prnEntriesSelfAssessWife=False
		ElseIf (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&lt;(Cdbl(format(prnSelfAssess,&quot;#,##0.00&quot;)))+(Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;))) and (Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;)))&gt;0 then
			prnEntriesSelfAssessWife=False
		End If
	End If
End Sub
							
Sub advPaymentGreaterThanLiabilityWife() as Boolean
	Dim taxDue as Double
	Dim prnAdvPmt as Double
	Dim prnTotal as Double
	Dim prnSelfAssess as Double
	Dim rn_no_12 as Double
	Dim rn_no_131 as Double
	Dim rn_no_132 as Double
	Dim rn_no_133 as Double
	Dim rn_no_134 as Double
	Dim rn_no_135 as Double
	Dim rn_no_137 as double
	advPaymentGreaterThanLiabilityWife=True
	
	rn_no_12=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.TotTaxableIncomeLessRlfW&quot;).value
	rn_no_131=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.PayeDedListWTO&quot;).value
	rn_no_132=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.InstallmentTaxListWTO&quot;).value
	rn_no_133=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.WithHoldingListWTO&quot;).value
	rn_no_134=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.VehicleAdvTaxPaidListWTO&quot;).value
	rn_no_135=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomePaidAdvanceListWTO&quot;).value
	rn_no_137=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomeDTACreditsS&quot;).value
	taxDue=rn_no_12-rn_no_131-rn_no_132-rn_no_133-rn_no_134-rn_no_135-rn_no_137
	prnAdvPmt=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvanceListWTO&quot;).value
	prnTotal=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvncSelfAssmntListWTO&quot;).value
	prnSelfAssess=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidSelfAssmntListWTO&quot;).value
	
	If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&gt;0 then
		If (Cdbl(format(prnSelfAssess,&quot;#,##0.00&quot;)))&lt;=0 then
			If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&lt;(Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;))) then
				advPaymentGreaterThanLiabilityWife=False
			End If
		End If
	End If
End Sub

Sub selfPaymentGreaterThanLiabilityWife() as Boolean
	Dim taxDue as Double
	Dim prnAdvPmt as Double
	Dim prnTotal as Double
	Dim prnSelfAssess as Double
	Dim rn_no_12 as Double
	Dim rn_no_131 as Double
	Dim rn_no_132 as Double
	Dim rn_no_133 as Double
	Dim rn_no_134 as Double
	Dim rn_no_135 as Double
	Dim rn_no_137 as double
	selfPaymentGreaterThanLiabilityWife=True
	
	rn_no_12=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.TotTaxableIncomeLessRlfW&quot;).value
	rn_no_131=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.PayeDedListWTO&quot;).value
	rn_no_132=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.InstallmentTaxListWTO&quot;).value
	rn_no_133=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.WithHoldingListWTO&quot;).value
	rn_no_134=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.VehicleAdvTaxPaidListWTO&quot;).value
	rn_no_135=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomePaidAdvanceListWTO&quot;).value
	rn_no_137=ThisComponent.Sheets.getByName(&quot;T_Tax_Computation&quot;).getCellrangeByName(&quot;TaxComp.IncomeDTACreditsS&quot;).value
	taxDue=rn_no_12-rn_no_131-rn_no_132-rn_no_133-rn_no_134-rn_no_135-rn_no_137
	prnAdvPmt=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvanceListWTO&quot;).value
	prnTotal=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidAdvncSelfAssmntListWTO&quot;).value
	prnSelfAssess=ThisComponent.Sheets.getByName(&quot;Q_IT_Payment_Credits&quot;).getCellrangeByName(&quot;DtlIncomePaid.IncomePaidSelfAssmntListWTO&quot;).value
	
	If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&gt;0 then
		If (Cdbl(format(prnAdvPmt,&quot;#,##0.00&quot;)))&lt;=0 then
			If (Cdbl(format(taxDue,&quot;#,##0.00&quot;)))&lt;(Cdbl(format(prnSelfAssess,&quot;#,##0.00&quot;))) then
				selfPaymentGreaterThanLiabilityWife=False
			End If
		End If
	End If
End Sub

Public Function TestPRN(lstr_check As String) As Boolean
&apos;allowed characters A to Z, a to z And Blank
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer
Dim count As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
count = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case &quot;0&quot; To &quot;9&quot;          &apos;0 to 9
            ia = ia + 1
        Case &quot;-&quot;                 &apos; Hypen
        	count=count+1
            ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestPRN = True
Else
    TestPRN = False
End If
&apos;Single Hypen
&apos;If count&gt;1 Then
&apos;	TestPRN = False
&apos;End If
&apos;For checking whether all characters in PRN are 0.
ia=0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case &quot;0&quot;         &apos;0
            ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If stlen &lt;&gt; 0 then
	If ia = stlen then
		TestPRN = False
	End If
End If
End Function

sub resetAuditDate()
	&apos;code

	    Dim sheet as Object
	    Dim dateFlag as Boolean
	    Dim msgStr As string
		
		Dim dateFrom As String
		Dim dateTo As String
		Dim dateToObject as Object
		Dim currentToDate as Date
	&apos;***	

			Unprotectsheet(&quot;A_Basic_Info&quot;)
			dateFrom= ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string
			dateFromObject= ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;)
			dateTo= ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;).string
			dateToObject= ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetEndDate&quot;)
			
	         If dateTo&lt;&gt;&quot;&quot; then
	            If (ValidateDate(dateTo) = False) Then
			         dateToObject.string = &quot;&quot;
	   		    Else
	   		      If dateFrom&lt;&gt;&quot;&quot; then
		   		    	If checkFutureDate(dateTo)= false then
							dateToObject.string = &quot;&quot;
						Else
			        	    If dateFrom&lt;&gt;&quot;&quot; and dateTo&lt;&gt;&quot;&quot; then
				        	    If getYear(dateTo)&lt;&gt;getYear(dateFrom) and getYear(dateFrom) &lt;&gt; &quot;False&quot; and getYear(dateTo) &lt;&gt; &quot;False&quot; then
				        	    	dateToObject.string=&quot;&quot;
				        	    End If
				        	End If
			        	    If dateFromObject.string&lt;&gt;&quot;&quot; and dateToObject.string&lt;&gt;&quot;&quot; and checkGrtrThnNotEqlDate(dateFrom,dateTo)=False then
			                		dateToObject.string=&quot;&quot;
			                End If
			                If dateToObject.string&lt;&gt;&quot;&quot; then
			                	currentToDate = DateSerial(getYear(dateTo), getMonth(dateTo), getDay(dateTo))
			                	auditEndDate = Format(DateAdd(&quot;m&quot;,6,currentToDate), &quot;dd/mm/yyyy&quot;)
								ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.dateforAuditCertificate&quot;).string=CStr(auditEndDate)
			                End If
			            End If
			       Else
			       		dateToObject.string=&quot;&quot;
			       End If
	             End If
	         End If
	&apos;***	
			If dateToObject.string=&quot;&quot; then
			  	ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.dateforAuditCertificate&quot;).string=&quot;&quot;
			End If
			protectsheet(&quot;A_Basic_Info&quot;)
	&apos;code
end sub

Public Function checkProfitLossSelf(ByVal cellVal as Double) As Boolean
unprotectsheet(&quot;B_Profit_Loss_Account_Self&quot;)
Dim zeroValue as Double
Dim doCheck as String
Dim consolidatedSr1 as Double
Dim consolidatedSr2 as Double
Dim consolidatedSr3 as Double
Dim consolidatedSr4 as Double
Dim consolidatedSr5 as Double
Dim consolidatedSr6 as Double
Dim consolidatedSr7 as Double
Dim consolidatedSr8 as Double
Dim consolidatedSr9 as Double
Dim consolidatedSr10 as Double
Dim consolidatedSr11 as Double
Dim consolidatedSr12 as Double
Dim consolidatedSr13 as Double
zeroValue=0

doCheck = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareSelfBusIncome&quot;).string
consolidatedSr1 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.GrossTurnoverBPConToS&quot;).value
consolidatedSr2 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.OpeningStockS&quot;).value
consolidatedSr3 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.PurchasesS&quot;).value
consolidatedSr4 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.OtherDirectCostsS&quot;).value
consolidatedSr5 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.OverHeadsS&quot;).value
consolidatedSr6 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.ClosingStockS&quot;).value
consolidatedSr7 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.OtherIncomeS&quot;).value
consolidatedSr8 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.OperatingExpenseS&quot;).value
consolidatedSr9 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.AdministrativeExpenseS&quot;).value
consolidatedSr10 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.EmploymentExpensesS&quot;).value
consolidatedSr11 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.FinancialExpensesS&quot;).value
consolidatedSr12 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.OtherExpensesPartIS&quot;).value
consolidatedSr13 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Self&quot;).getCellrangeByName(&quot;PLA.IncomeTaxExpenseS&quot;).value
&apos;Cdbl(format(value,&quot;#,##0.00&quot;))
If doCheck=&quot;Yes&quot; then
	if Cdbl(format(consolidatedSr1,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr2,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr3,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr4,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr5,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr6,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr7,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr8,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr9,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr10,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr11,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr12,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr13,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) then
		checkProfitLossSelf=False
	Else
		checkProfitLossSelf=True
	end if
Else
	checkProfitLossSelf=True
End If
protectsheet(&quot;B_Profit_Loss_Account_Self&quot;)
End Function

Public Function checkProfitLossWife(ByVal cellVal as Double) As Boolean
unprotectsheet(&quot;B_Profit_Loss_Account_Wife&quot;)
Dim zeroValue as Double
Dim doCheck as String
Dim consolidatedSr1 as Double
Dim consolidatedSr2 as Double
Dim consolidatedSr3 as Double
Dim consolidatedSr4 as Double
Dim consolidatedSr5 as Double
Dim consolidatedSr6 as Double
Dim consolidatedSr7 as Double
Dim consolidatedSr8 as Double
Dim consolidatedSr9 as Double
Dim consolidatedSr10 as Double
Dim consolidatedSr11 as Double
Dim consolidatedSr12 as Double
Dim consolidatedSr13 as Double
zeroValue=0

doCheck = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareWifeBusIncome&quot;).string
consolidatedSr1 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.GrossTurnoverBPConToW&quot;).value
consolidatedSr2 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.OpeningStockW&quot;).value
consolidatedSr3 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.PurchasesW&quot;).value
consolidatedSr4 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.OtherDirectCostsW&quot;).value
consolidatedSr5 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.OverHeadsW&quot;).value
consolidatedSr6 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.ClosingStockW&quot;).value
consolidatedSr7 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.OtherIncomeW&quot;).value
consolidatedSr8 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.OperatingExpenseW&quot;).value
consolidatedSr9 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.AdministrativeExpenseW&quot;).value
consolidatedSr10 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.EmploymentExpensesW&quot;).value
consolidatedSr11 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.FinancialExpensesW&quot;).value
consolidatedSr12 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.OtherExpensesPartIW&quot;).value
consolidatedSr13 = 	ThisComponent.Sheets.getByName(&quot;B_Profit_Loss_Account_Wife&quot;).getCellrangeByName(&quot;PLA.IncomeTaxExpenseW&quot;).value
&apos;Cdbl(format(value,&quot;#,##0.00&quot;))
If doCheck=&quot;Yes&quot; then
	if Cdbl(format(consolidatedSr1,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr2,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr3,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr4,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr5,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr6,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr7,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr8,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr9,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr10,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr11,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr12,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(consolidatedSr13,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) then
		checkProfitLossWife=False
	Else
		checkProfitLossWife=True
	end if
Else
	checkProfitLossWife=True
End If
protectsheet(&quot;B_Profit_Loss_Account_Wife&quot;)
End Function

Public Function CompareValuesSelfCheckPropritory() As Boolean
unprotectsheet(&quot;C_Balance_Sheet&quot;)
Dim value1 as Double
Dim value2 as Double
Dim value3 as Double
Dim zeroValue as Double
Dim doCheck as String
zeroValue=0

value1 =    ThisComponent.Sheets.getByName(&quot;C_Balance_Sheet&quot;).getCellrangeByName(&quot;BalSt.TotalAStS&quot;).value
value2 =    ThisComponent.Sheets.getByName(&quot;C_Balance_Sheet&quot;).getCellrangeByName(&quot;BalSt.ProprietorFundLngTrmLaibtyS&quot;).value
value3 =    ThisComponent.Sheets.getByName(&quot;C_Balance_Sheet&quot;).getCellrangeByName(&quot;BalSt.ProperietorCptlS&quot;).value
doCheck = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareSelfBusIncome&quot;).string
CompareValuesSelfCheckPropritory=True
If doCheck=&quot;Yes&quot; then
	if Cdbl(format(value1,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(value2,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) then
		if Cdbl(format(value3,&quot;#,##0.00&quot;))&gt;Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) then
			CompareValuesSelfCheckPropritory=True
		Else
			CompareValuesSelfCheckPropritory=False
		End If
	End If
Else
	CompareValuesSelfCheckPropritory=True
End If
protectsheet(&quot;C_Balance_Sheet&quot;)
End Function

Public Function CompareValuesWifeCheckPropritory() As Boolean
unprotectsheet(&quot;C_Balance_Sheet&quot;)
Dim value1 as Double
Dim value2 as Double
Dim value3 as Double
Dim zeroValue as Double
Dim doCheck as String
Dim wifeActive as String
zeroValue=0

value1 =    ThisComponent.Sheets.getByName(&quot;C_Balance_Sheet&quot;).getCellrangeByName(&quot;BalSt.TotalAStW&quot;).value
value2 =    ThisComponent.Sheets.getByName(&quot;C_Balance_Sheet&quot;).getCellrangeByName(&quot;BalSt.ProprietorFundLngTrmLaibtyW&quot;).value
value3 =    ThisComponent.Sheets.getByName(&quot;C_Balance_Sheet&quot;).getCellrangeByName(&quot;BalSt.ProperietorCptlW&quot;).value
doCheck = ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareWifeBusIncome&quot;).string
wifeActive=ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.DeclareWifeIncome&quot;).string
CompareValuesWifeCheckPropritory=True
If doCheck=&quot;Yes&quot; then
	if Cdbl(format(value1,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) and Cdbl(format(value2,&quot;#,##0.00&quot;))=Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) then
		if Cdbl(format(value3,&quot;#,##0.00&quot;))&gt;Cdbl(format(zeroValue,&quot;#,##0.00&quot;)) then
			CompareValuesWifeCheckPropritory=True
		Else
			if wifeActive=&quot;Yes&quot; then
				CompareValuesWifeCheckPropritory=False
			else
				CompareValuesWifeCheckPropritory=True
			End if
		End If
	End If
Else
	CompareValuesWifeCheckPropritory=True
End If
protectsheet(&quot;C_Balance_Sheet&quot;)
End Function

Public Function checkDateOfCertificate(ByVal value As String) As Boolean
Dim startDate as String

checkDateOfCertificate = True

unprotectsheet(&quot;A_Basic_Info&quot;)
&apos;-&gt;Arjun
if(ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string&lt;&gt;&quot;&quot;)then
	startDate =    ThisComponent.Sheets.getByName(&quot;A_Basic_Info&quot;).getCellrangeByName(&quot;RetInf.RetStartDate&quot;).string
	
	If dateVal&lt;&gt;&quot;&quot; then
	          If  ValidateDate(value) then
		           If  checkFutureDate(value) = False Then
		   	   		    	checkDateOfCertificate = False
		   		   ElseIf  checkGrtrThnDate(startDate,value)=False then
		   		   			checkDateOfCertificate = False
		  	       End If
			  Else
			  		checkDateOfCertificate = False
			  End If	 
	         End If
Else
	checkDateOfCertificate = True
End If
protectsheet(&quot;A_Basic_Info&quot;)
End Function

sub arjun 
	thisComponent.CurrentController.Frame.ContainerWindow.Enable= True
end sub
</script:module>